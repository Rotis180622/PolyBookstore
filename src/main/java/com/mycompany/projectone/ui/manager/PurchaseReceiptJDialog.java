/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.PurchaseReceiptController;
import com.mycompany.projectone.dao.impl.BookDAOImpl;
import com.mycompany.projectone.dao.impl.EmployeeDAOImpl;
import com.mycompany.projectone.dao.impl.PurchaseReceiptDAOImpl;
import com.mycompany.projectone.dao.impl.PurchaseReceiptDetailDAOImpl;
import com.mycompany.projectone.dao.impl.PurchaseReceiptVModelDAOImpl;
import com.mycompany.projectone.dao.impl.StockDAOImpl;
import com.mycompany.projectone.dao.impl.SupplierDAOImpl;
import com.mycompany.projectone.entity.PurchaseReceipt;
import com.mycompany.projectone.entity.PurchaseReceiptDetail;
import com.mycompany.projectone.entity.Stock;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import com.mycompany.projectone.viewmodel.PurchaseReceiptVM;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class PurchaseReceiptJDialog extends javax.swing.JDialog implements PurchaseReceiptController {

    /**
     * Creates new form PurchaseReceiptJDialog
     */
    public PurchaseReceiptJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        pnlFilter = new javax.swing.JPanel();
        lblFilterID = new javax.swing.JLabel();
        txtFilterID = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblStartDate = new javax.swing.JLabel();
        dateStart = new com.toedter.calendar.JDateChooser();
        lblEndDate = new javax.swing.JLabel();
        dateEnd = new com.toedter.calendar.JDateChooser();
        pnlControlButtons = new javax.swing.JPanel();
        btnExcel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetails = new javax.swing.JTable();
        pnlForm = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlInput = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblReceiptID = new javax.swing.JLabel();
        txtReceiptID = new javax.swing.JTextField();
        lblEmpID = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        lblSupplierID = new javax.swing.JLabel();
        txtSupplierID = new javax.swing.JTextField();
        lblDOP = new javax.swing.JLabel();
        dateDOP = new com.toedter.calendar.JDateChooser();
        lblQuantity = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        lblBookID = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý phiếu nhập");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabs.setPreferredSize(new java.awt.Dimension(400, 410));

        pnlList.setPreferredSize(new java.awt.Dimension(473, 400));
        pnlList.setLayout(new java.awt.BorderLayout(0, 10));

        pnlFilter.setPreferredSize(new java.awt.Dimension(473, 50));
        pnlFilter.setLayout(new java.awt.GridLayout(2, 4, 5, 5));

        lblFilterID.setText("Nhập mã phiếu");
        pnlFilter.add(lblFilterID);
        pnlFilter.add(txtFilterID);

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        pnlFilter.add(btnFilter);

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        pnlFilter.add(btnClear);

        lblStartDate.setText("Từ ngày");
        pnlFilter.add(lblStartDate);
        pnlFilter.add(dateStart);

        lblEndDate.setText("Đến ngày");
        pnlFilter.add(lblEndDate);
        pnlFilter.add(dateEnd);

        pnlList.add(pnlFilter, java.awt.BorderLayout.PAGE_START);

        pnlControlButtons.setPreferredSize(new java.awt.Dimension(466, 50));

        btnExcel.setBackground(new java.awt.Color(102, 204, 0));
        btnExcel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlButtonsLayout = new javax.swing.GroupLayout(pnlControlButtons);
        pnlControlButtons.setLayout(pnlControlButtonsLayout);
        pnlControlButtonsLayout.setHorizontalGroup(
            pnlControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExcel)
                .addContainerGap(358, Short.MAX_VALUE))
        );
        pnlControlButtonsLayout.setVerticalGroup(
            pnlControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExcel)
                .addGap(34, 34, 34))
        );

        pnlList.add(pnlControlButtons, java.awt.BorderLayout.PAGE_END);

        tblDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã phiếu CT", "Tên sách", "Thể loại", "Số lượng", "Ngày nhập", "Nhà cung cấp", "Nhân viên nhập"
            }
        ));
        tblDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDetails);

        pnlList.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabs.addTab("Danh sách", pnlList);

        pnlForm.setPreferredSize(new java.awt.Dimension(354, 400));
        pnlForm.setLayout(new java.awt.BorderLayout(10, 0));

        pnlButtons.setLayout(new java.awt.GridLayout(2, 4, 10, 10));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setToolTipText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnlButtons.add(btnSave);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        btnUpdate.setMnemonic('U');
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setMnemonic('D');
        btnDelete.setToolTipText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);

        btnRefresh.setMnemonic('R');
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.png")));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(btnRefresh);

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        btnCreate.setMnemonic('A');
        btnCreate.setToolTipText("Thêm");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCreate);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnFirst.setMnemonic('F');
        btnFirst.setToolTipText("Đến đầu danh sách");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnPrev.setMnemonic('P');
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnNext.setMnemonic('N');
        btnNext.setToolTipText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png"))); // NOI18N
        btnLast.setMnemonic('L');
        btnLast.setToolTipText("Đến cuối danh sách");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);

        pnlForm.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        pnlInput.setPreferredSize(new java.awt.Dimension(354, 50));
        pnlInput.setLayout(new java.awt.GridBagLayout());

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        lblTitle.setText("PHIẾU NHẬP HÀNG");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        pnlInput.add(lblTitle, gridBagConstraints);

        lblReceiptID.setText("Mã phiếu");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        pnlInput.add(lblReceiptID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        pnlInput.add(txtReceiptID, gridBagConstraints);

        lblEmpID.setText("Mã nhân viên");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 5, 0);
        pnlInput.add(lblEmpID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 4, 45);
        pnlInput.add(txtEmpID, gridBagConstraints);

        lblSupplierID.setText("Mã nhà cung cấp");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        pnlInput.add(lblSupplierID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        pnlInput.add(txtSupplierID, gridBagConstraints);

        lblDOP.setText("Ngày nhập hàng");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 3, 0);
        pnlInput.add(lblDOP, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 3, 0);
        pnlInput.add(dateDOP, gridBagConstraints);

        lblQuantity.setText("Số lượng nhập");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        pnlInput.add(lblQuantity, gridBagConstraints);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 0);
        pnlInput.add(spnQuantity, gridBagConstraints);

        lblBookID.setText("Mã sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 9);
        pnlInput.add(lblBookID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        pnlInput.add(txtBookID, gridBagConstraints);

        pnlForm.add(pnlInput, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetailsMouseClicked
        this.edit();
    }//GEN-LAST:event_tblDetailsMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.saveForm();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtFilterID.setText("");
        dateStart.setDate(null);
        dateEnd.setDate(null);
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        if(this.validateForm()) {
            if(!txtFilterID.getText().trim().isBlank() && dateStart.getDate() == null && dateEnd.getDate() == null) {
            this.filterByReceiptID(Integer.valueOf(txtFilterID.getText().trim()));
        }
        
         if(txtFilterID.getText().trim().isBlank() && dateStart.getDate() != null && dateEnd.getDate() != null){
             this.filterByTimeRange(dateStart.getDate(), dateEnd.getDate());
         }
        }    
        
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.exportFile();
    }//GEN-LAST:event_btnExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseReceiptJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseReceiptJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseReceiptJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseReceiptJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PurchaseReceiptJDialog dialog = new PurchaseReceiptJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser dateDOP;
    private com.toedter.calendar.JDateChooser dateEnd;
    private com.toedter.calendar.JDateChooser dateStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblDOP;
    private javax.swing.JLabel lblEmpID;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblFilterID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblReceiptID;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblSupplierID;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControlButtons;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlList;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblDetails;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtFilterID;
    private javax.swing.JTextField txtReceiptID;
    private javax.swing.JTextField txtSupplierID;
    // End of variables declaration//GEN-END:variables

    List<PurchaseReceiptVM> viewList = List.of();
    PurchaseReceiptVModelDAOImpl viewDao = new PurchaseReceiptVModelDAOImpl();
    List<PurchaseReceiptDetail> detailList = new ArrayList<>();
    
    PurchaseReceiptDAOImpl receiptDao = new PurchaseReceiptDAOImpl();
    PurchaseReceiptDetailDAOImpl detailDao = new PurchaseReceiptDetailDAOImpl();
    EmployeeDAOImpl employeeDao = new EmployeeDAOImpl();
    BookDAOImpl bookDao = new BookDAOImpl();
    SupplierDAOImpl supplierDao = new SupplierDAOImpl();
    StockDAOImpl stockDao = new StockDAOImpl();
   
    DefaultTableModel model; 
    
    int index;
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
    }

    @Override
    public void setForm(PurchaseReceiptVM entity) {
        txtReceiptID.setText(String.valueOf(entity.getReceiptID()));
        txtEmpID.setText(String.valueOf(entity.getEmployeeID()));
        txtSupplierID.setText(String.valueOf(entity.getSupplierID()));
        dateDOP.setDate(new java.util.Date(entity.getReceiptDate().getTime() ));
        txtBookID.setText(String.valueOf(entity.getBookID()));
        spnQuantity.setValue(entity.getQuantity());
    }

    @Override
    public PurchaseReceiptVM getForm() {
        PurchaseReceiptVM entity = new PurchaseReceiptVM();
        
        entity.setReceiptID(Integer.parseInt(txtReceiptID.getText()));
        entity.setEmployeeID(Integer.parseInt(txtEmpID.getText()));
        entity.setSupplierID(Integer.parseInt(txtSupplierID.getText()));
        entity.setBookID(Integer.parseInt(txtBookID.getText()));
        entity.setQuantity((Integer) spnQuantity.getValue());
        entity.setReceiptDate(new java.sql.Date(dateDOP.getDate().getTime() ));
        return entity;
    }

    @Override
    public void create() {
        if(!detailList.isEmpty()) {
              PurchaseReceipt purchaseReceipt = detailList.get(0).getPurchaseReceipt();
             if(receiptDao.findById(purchaseReceipt.getReceiptID()) == null) {
                 receiptDao.create(purchaseReceipt);

                for(PurchaseReceiptDetail detail : detailList) {
                   detailDao.create(detail);
                }
                XDialog.alert("Thêm dữ liệu thành công!");
                detailList.clear();
                this.fillToTable();
                this.updateStock((Integer)spnQuantity.getValue(), dateDOP.getDate());
             }else {
                 JOptionPane.showMessageDialog(this, "Mã hóa đơn đã tồn tại!", "Không hợp lệ!", 0);
             }
            
        }else {
            JOptionPane.showMessageDialog(this, "Thêm thất bại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
        }  
        
        
    }

    @Override
    public void update() {
         PurchaseReceipt pr = receiptDao.findById(Integer.valueOf(txtReceiptID.getText().trim()));
        
        if(pr == null) {
            XDialog.alert("Mã không tồn tại!");
        }else {
           if(XDialog.confirm("Bạn muốn cập nhật mục này?")) {
            receiptDao.update(this.getReceipt());
            detailDao.update(this.getDetail());
            this.fillToTable();
            } 
        }
    }
    
      private PurchaseReceipt getReceipt() {
          PurchaseReceiptVM entity = this.getForm();
          
          PurchaseReceipt pr = new PurchaseReceipt();
          pr.setReceiptID(entity.getReceiptID());
          pr.setEmployeeID(entity.getEmployeeID());
          pr.setSupplierID(entity.getSupplierID());
          pr.setReceiptDate(entity.getReceiptDate());
          return pr;
      }

    private PurchaseReceiptDetail getDetail() {
        PurchaseReceiptVM entity = this.getForm();
        
        PurchaseReceiptDetail detail = new PurchaseReceiptDetail();
        detail.setBookID(entity.getBookID());
        detail.setQuantity(entity.getQuantity());
        detail.setPurchaseReceipt(this.getReceipt());
        return detail;
    }

    @Override
    public void delete() {
            PurchaseReceipt purchaseReceipt = receiptDao.findById(Integer.valueOf(txtReceiptID.getText().trim()));

            if(purchaseReceipt != null) {
                if(XDialog.confirm("Bạn có chắc chắn muốn xóa mục này!")) {
                     receiptDao.deleteById(purchaseReceipt.getReceiptID());
                     XDialog.alert("Đã xóa thành công!");
                     this.fillToTable();
                     this.clear();
                }
            }else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy mã!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
                this.clear();
            }
    }

    @Override
    public void clear() {
        this.setForm(new PurchaseReceiptVM());
    }

    @Override
    public void setEditable(boolean editable) {
        txtReceiptID.setEditable(editable);
        txtEmpID.setEditable(editable);
        txtSupplierID.setEnabled(editable);
        dateDOP.setEnabled(editable);
        
        txtBookID.setText("");
        spnQuantity.setValue(0);
    }

        @Override
    public void fillToTable() {
        viewList = viewDao.findAll();
        
        model = (DefaultTableModel) tblDetails.getModel();
        model.setRowCount(0);
        
        for(PurchaseReceiptVM entity : viewList) {
            Object[] rowData = {
                entity.getDetailID(),
                entity.getTitle(),
               entity.getCategoryName(),
               entity.getQuantity(),
               entity.getReceiptDate(),
               entity.getSupplierName(),
               entity.getFullName()
            };
            model.addRow(rowData);
        }
    }

    @Override
    public void edit() {
        viewList = viewDao.findAll();
        
        PurchaseReceiptVM entity = viewList.get(tblDetails.getSelectedRow());
        
        this.setForm(entity);
        tabs.setSelectedIndex(1);
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        index--;
        this.moveTo(index);
    }

    @Override
    public void moveNext() {
        index++;
        this.moveTo(index);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblDetails.getRowCount() - 1);
    }

    @Override
    public void moveTo(int rowIndex) {
        index = rowIndex;
        
        if(index < 0) index = tblDetails.getRowCount() -1;
        else if(index > tblDetails.getRowCount() -1) index = 0;
        
        viewList = viewDao.findAll();
        
        PurchaseReceiptVM entity = viewList.get(index);
        
        this.setForm(entity);
    }

    @Override
    public void checkAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void uncheckAll() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void deleteCheckedItems() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void saveForm() {
        if(validateInputForm()) {
            PurchaseReceiptVM entity = this.getForm();
            
            //Set giá trị cho PurchaseReceipt
            PurchaseReceipt pr = new PurchaseReceipt();
            pr.setReceiptID(entity.getReceiptID());
            pr.setEmployeeID(entity.getEmployeeID());
            pr.setSupplierID(entity.getSupplierID());
            pr.setReceiptDate(entity.getReceiptDate());
            
            //Set giá trị cho PurchaseReceiptDetail
          PurchaseReceiptDetail prd = new PurchaseReceiptDetail();
          prd.setBookID(entity.getBookID());
          prd.setQuantity(entity.getQuantity());
          prd.setPurchaseReceipt(pr);
          detailList.add(prd);
          this.setEditable(false);
        }
    }
    
    @Override
    public boolean validateInputForm() {
         // 1. Kiểm tra ô trống
        if (txtReceiptID.getText().trim().isBlank() 
                || txtEmpID.getText().trim().isBlank() 
                || txtBookID.getText().trim().isBlank()
                || txtSupplierID.getText().trim().isBlank() 
                || dateDOP.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Không được để trống ô nhập!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // 2. Lấy giá trị 
        int receiptID  = Integer.parseInt(txtReceiptID.getText().trim());
        int empID      = Integer.parseInt(txtEmpID.getText().trim());
        int bookID     = Integer.parseInt(txtBookID.getText().trim());
        int supplierID = Integer.parseInt(txtSupplierID.getText().trim());

        // 3. Check mã hóa đơn trùng
        if (receiptDao.findById(receiptID) != null) {
            JOptionPane.showMessageDialog(this, "Mã hóa đơn đã tồn tại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // 4. Check mã nhân viên tồn tại
        if (employeeDao.findById(empID) == null) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên không tồn tại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // 5. Check mã sách tồn tại
        if (bookDao.findById(bookID) == null) {
            JOptionPane.showMessageDialog(this, "Mã sách không tồn tại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        // 6. Check mã nhà cung cấp tồn tại
        if (supplierDao.findById(supplierID) == null) {
            JOptionPane.showMessageDialog(this, "Mã nhà cung cấp không tồn tại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true; // Tất cả hợp lệ
    }

    @Override
    public boolean validateForm() {
        if (txtFilterID.getText().trim().isBlank() && dateStart.getDate() == null && dateEnd.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Không được để trống ô nhập!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    @Override
    public void filterByReceiptID(Integer receiptID) {
        viewList = viewDao.findByReceiptID(receiptID);
        
        if(viewList.isEmpty()) {
            XDialog.alert("Không tìm thấy mã!");
            txtFilterID.setText("");
        }else {
            model = (DefaultTableModel) tblDetails.getModel();
            model.setRowCount(0);
            
            for(PurchaseReceiptVM entity : viewList) {
                Object[] rowData = {
                    entity.getDetailID(),
                    entity.getTitle(),
                    entity.getCategoryName(),
                    entity.getQuantity(),
                    entity.getReceiptDate(),
                    entity.getSupplierName(),
                    entity.getFullName()
                };
                model.addRow(rowData);
            }
        }
    }

    @Override
    public void filterByTimeRange(Date begin, Date end) {
        java.sql.Date sqlStart = new java.sql.Date(begin.getTime());
        java.sql.Date sqlEnd = new java.sql.Date(end.getTime());
        viewList = viewDao.findByTimeRange(sqlStart, sqlEnd);
        
        if(viewList.isEmpty()) {
            XDialog.alert("Không tìm phiếu trong khoảng thời gian này!");
            dateStart.setDate(null);
            dateEnd.setDate(null);
        }else {
            model = (DefaultTableModel) tblDetails.getModel();
            model.setRowCount(0);
            
            for(PurchaseReceiptVM entity : viewList) {
                Object[] rowData = {
                    entity.getDetailID(),
                    entity.getTitle(),
                    entity.getCategoryName(),
                    entity.getQuantity(),
                    entity.getReceiptDate(),
                    entity.getSupplierName(),
                    entity.getFullName()
                };
                model.addRow(rowData);
            }
        }
    }
    
    @Override
    public void updateStock(Integer quantity, Date lastUpdated) {
        PurchaseReceiptVM entity = this.getForm();
        Stock stock = stockDao.findByBookID(entity.getBookID());
        
        stock.setQuantity(stock.getQuantity() + quantity);
        stock.setLastUpdated(lastUpdated);
        
        stockDao.update(stock);
    }
    
    @Override
    public void rollbackStock(Integer quantity) {
        PurchaseReceiptVM entity = this.getForm();
        Stock stock = stockDao.findByBookID(entity.getBookID());

        stock.setQuantity(stock.getQuantity() - quantity); // trừ số lượng
        stockDao.update(stock);
    }
    
    public void exportFile() {
            if(tblDetails.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            }
            String[] header = {"Mã phiếu CT", "Tên sách", "Thể loại", "Số lượng", "Ngày nhập", "Nhà cung cấp", "Nhân viên"};
            List<PurchaseReceiptVM> list = viewDao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(PurchaseReceiptVM obj : list) {
                   Object[] row = {
                       obj.getDetailID(),
                       obj.getTitle(),
                       obj.getCategoryName(),
                       obj.getQuantity(),
                       obj.getReceiptDate(),
                       obj.getSupplierName(),
                       obj.getFullName()
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý phiếu nhập";
            String title = "Chi tiết phiếu nhập";

            XFile.exportFile(this, title, header, fileName, listObj);
       
    }

  
}
