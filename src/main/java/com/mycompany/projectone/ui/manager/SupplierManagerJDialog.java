/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.SupplierController;
import com.mycompany.projectone.dao.impl.SupplierContactDAOImpl;
import com.mycompany.projectone.dao.impl.SupplierDAOImpl;
import com.mycompany.projectone.dao.impl.SupplierDTODaoImpl;
import com.mycompany.projectone.entity.Supplier;
import com.mycompany.projectone.entity.SupplierContact;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import com.mycompany.projectone.util.XJdbc;
import com.mycompany.projectone.viewmodel.SupplierDTO;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */public class SupplierManagerJDialog extends javax.swing.JDialog implements SupplierController {

    /**
     * Creates new form SupplierManagerJDialog
     */
    public SupplierManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        pnlFilter = new javax.swing.JPanel();
        lblFilterID = new javax.swing.JLabel();
        txtFilterID = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblFilterContactID = new javax.swing.JLabel();
        txtFilterContactID = new javax.swing.JTextField();
        lblFilterSupplName = new javax.swing.JLabel();
        txtFilterSupplName = new javax.swing.JTextField();
        pnlControlButtons = new javax.swing.JPanel();
        btnCheckAll = new javax.swing.JButton();
        UncheckAll = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContacts = new javax.swing.JTable();
        pnlForm = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlInput = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblSupplID = new javax.swing.JLabel();
        txtSupplID = new javax.swing.JTextField();
        lblSupplName = new javax.swing.JLabel();
        txtSupplName = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        lblContactID = new javax.swing.JLabel();
        txtContactID = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        spnQuantity = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý nhà cung cấp");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlList.setLayout(new java.awt.BorderLayout());

        pnlFilter.setPreferredSize(new java.awt.Dimension(465, 60));
        pnlFilter.setLayout(new java.awt.GridBagLayout());

        lblFilterID.setText("Nhập mã NXB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlFilter.add(lblFilterID, gridBagConstraints);

        txtFilterID.setPreferredSize(new java.awt.Dimension(50, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlFilter.add(txtFilterID, gridBagConstraints);

        btnFilter.setBackground(new java.awt.Color(0, 0, 0));
        btnFilter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnFilter.setForeground(new java.awt.Color(255, 255, 255));
        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        pnlFilter.add(btnFilter, gridBagConstraints);

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        pnlFilter.add(btnClear, gridBagConstraints);

        lblFilterContactID.setText("Nhập mã danh bạ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 0);
        pnlFilter.add(lblFilterContactID, gridBagConstraints);

        txtFilterContactID.setPreferredSize(new java.awt.Dimension(50, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlFilter.add(txtFilterContactID, gridBagConstraints);

        lblFilterSupplName.setText("Nhập tên NXB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 13, 0, 0);
        pnlFilter.add(lblFilterSupplName, gridBagConstraints);

        txtFilterSupplName.setPreferredSize(new java.awt.Dimension(50, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        pnlFilter.add(txtFilterSupplName, gridBagConstraints);

        pnlList.add(pnlFilter, java.awt.BorderLayout.PAGE_START);

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        UncheckAll.setText("Bỏ chọn tất cả");
        UncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UncheckAllActionPerformed(evt);
            }
        });

        jButton1.setText("Xóa các mục đã chọn");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 204, 102));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Xuất Excel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlControlButtonsLayout = new javax.swing.GroupLayout(pnlControlButtons);
        pnlControlButtons.setLayout(pnlControlButtonsLayout);
        pnlControlButtonsLayout.setHorizontalGroup(
            pnlControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UncheckAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(147, 147, 147))
        );
        pnlControlButtonsLayout.setVerticalGroup(
            pnlControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlControlButtonsLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(pnlControlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(UncheckAll)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pnlList.add(pnlControlButtons, java.awt.BorderLayout.PAGE_END);

        tblContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã danh bạ", "Tên NXB", "Email", "Số điên thoại", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblContacts);

        pnlList.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabs.addTab("Danh sách", pnlList);

        pnlForm.setLayout(new java.awt.BorderLayout());

        pnlButtons.setLayout(new java.awt.GridLayout(2, 4, 10, 10));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        btnSave.setMnemonic('S');
        btnSave.setToolTipText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        pnlButtons.add(btnSave);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        btnUpdate.setMnemonic('U');
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setMnemonic('D');
        btnDelete.setToolTipText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.png"))); // NOI18N
        btnRefresh.setMnemonic('R');
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(btnRefresh);

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/add.png"))); // NOI18N
        btnCreate.setMnemonic('A');
        btnCreate.setToolTipText("Thêm");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCreate);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnFirst.setMnemonic('F');
        btnFirst.setToolTipText("Đến đầu danh sách");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnPrev.setMnemonic('P');
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnNext.setMnemonic('N');
        btnNext.setToolTipText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png"))); // NOI18N
        btnLast.setMnemonic('L');
        btnLast.setToolTipText("Đến cuối danh sách");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);

        pnlForm.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        pnlInput.setLayout(new java.awt.GridBagLayout());

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        lblTitle.setText("THÔNG TIN NHÀ XUẤT BẢN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 13, 0);
        pnlInput.add(lblTitle, gridBagConstraints);

        lblSupplID.setText("Mã NXB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        pnlInput.add(lblSupplID, gridBagConstraints);

        txtSupplID.setMinimumSize(new java.awt.Dimension(90, 22));
        txtSupplID.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        pnlInput.add(txtSupplID, gridBagConstraints);

        lblSupplName.setText("Tên NXB");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 1, 0);
        pnlInput.add(lblSupplName, gridBagConstraints);

        txtSupplName.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 3, 0);
        pnlInput.add(txtSupplName, gridBagConstraints);

        lblQuantity.setText("Số lượng sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 1, 0);
        pnlInput.add(lblQuantity, gridBagConstraints);

        lblContactID.setText("Mã danh bạ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        pnlInput.add(lblContactID, gridBagConstraints);

        txtContactID.setMinimumSize(new java.awt.Dimension(90, 22));
        txtContactID.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        pnlInput.add(txtContactID, gridBagConstraints);

        lblEmail.setText("Email");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        pnlInput.add(lblEmail, gridBagConstraints);

        txtEmail.setPreferredSize(new java.awt.Dimension(90, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlInput.add(txtEmail, gridBagConstraints);

        lblPhone.setText("Số điện thoại");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        pnlInput.add(lblPhone, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlInput.add(txtPhone, gridBagConstraints);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        pnlInput.add(spnQuantity, gridBagConstraints);

        pnlForm.add(pnlInput, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void UncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_UncheckAllActionPerformed

    private void tblContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblContactsMouseClicked
        this.edit();
    }//GEN-LAST:event_tblContactsMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.deleteCheckedItems();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        if(this.validateForm()) {
            if(!txtFilterID.getText().trim().isBlank() && txtFilterContactID.getText().trim().isBlank() && txtFilterSupplName.getText().trim().isBlank() ) {
                this.findBySupplierID(Integer.valueOf(txtFilterID.getText()));
            } else if(txtFilterID.getText().trim().isBlank() && !txtFilterContactID.getText().trim().isBlank() && txtFilterSupplName.getText().trim().isBlank() ) {
                this.findByContactID(Integer.valueOf(txtFilterContactID.getText()));
            
            } else if(txtFilterID.getText().trim().isBlank() && txtFilterContactID.getText().trim().isBlank() && !txtFilterSupplName.getText().trim().isBlank()) {
                 this.findBySupplierName(txtFilterSupplName.getText());
             }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.fillToTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.saveForm();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.exportExcel();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SupplierManagerJDialog dialog = new SupplierManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UncheckAll;
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContactID;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFilterContactID;
    private javax.swing.JLabel lblFilterID;
    private javax.swing.JLabel lblFilterSupplName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSupplID;
    private javax.swing.JLabel lblSupplName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControlButtons;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlList;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblContacts;
    private javax.swing.JTextField txtContactID;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFilterContactID;
    private javax.swing.JTextField txtFilterID;
    private javax.swing.JTextField txtFilterSupplName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSupplID;
    private javax.swing.JTextField txtSupplName;
    // End of variables declaration//GEN-END:variables

    SupplierDTODaoImpl viewDao = new SupplierDTODaoImpl();
    SupplierDAOImpl supplierDao = new SupplierDAOImpl();
    SupplierContactDAOImpl contactDao = new SupplierContactDAOImpl(); 
    
    DefaultTableModel model;
    
    List<SupplierDTO> supplierList;
    List<SupplierContact> tempContactList = new ArrayList<>();
    
    int index = 0;
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
    }

    @Override
    public void setForm(SupplierDTO entity) {
        txtSupplID.setText(String.valueOf(entity.getSupplierID()));
        txtSupplName.setText(entity.getSupplierName());
        txtContactID.setText(String.valueOf(entity.getContactID()));
        txtEmail.setText(entity.getEmail());
        txtPhone.setText(entity.getPhone());
        spnQuantity.setValue((Integer)entity.getNumberOfBooks());
    }

    @Override
    public SupplierDTO getForm() {
        SupplierDTO entity = new SupplierDTO();
        
        entity.setSupplierID(Integer.parseInt(txtSupplID.getText()));
        entity.setSupplierName(txtSupplName.getText());
        entity.setContactID(Integer.parseInt(txtContactID.getText()));
        entity.setEmail(txtEmail.getText());
        entity.setNumberOfBooks((Integer) spnQuantity.getValue());
        entity.setPhone(txtPhone.getText());
        
        return entity;
    }

    @Override
    public void create() {
        
        if(!tempContactList.isEmpty()) {
             Supplier supplier = tempContactList.get(0).getSupplier();
             if(supplierDao.findById(supplier.getSupplierID()) == null) {
                 supplierDao.create(supplier);

                for(SupplierContact contact : tempContactList) {
                   contactDao.create(contact);
                }
                XDialog.alert("Thêm dữ liệu thành công!");
                tempContactList.clear();
             }else {
                 JOptionPane.showMessageDialog(this, "Nhà cung cấp đã tồn tại!", "Không hợp lệ!", 0);
             }
            
        }else {
            JOptionPane.showMessageDialog(this, "Thêm thất bại!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
        }  
    }
    
    public void createWithTransaction() {
        Connection conn = null;
        try {
            conn = XJdbc.openConnection();
            conn.setAutoCommit(false);
            
             if(!tempContactList.isEmpty()) {
             Supplier supplier = tempContactList.get(0).getSupplier();
             
                 supplierDao.create(supplier);

                for(SupplierContact contact : tempContactList) {
                   contactDao.create(contact);
                }
                
                conn.commit();
                
                XDialog.alert("Thêm dữ liêu thành công!");
                this.fillToTable();
                tempContactList.clear();

            }else {
                JOptionPane.showMessageDialog(this, "Thêm thất bại!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            }  
        }catch(Exception e) {
            if(conn != null) {
                try{
                    conn.rollback();
                }catch(SQLException se) {
                    se.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(null, "Lỗi khi lưu dữ liệu: " + e.getMessage(),
                                      "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
        }finally{
            if(conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                }catch(SQLException se) {
                    se.printStackTrace();
                }
            }
        }
    }
    

    @Override
    public void update() {
        Supplier supplier = supplierDao.findById(Integer.valueOf(txtSupplID.getText().trim()));
        SupplierContact contact = contactDao.findById(Integer.valueOf(txtContactID.getText().trim()));
        
        if(supplier == null || contact == null) {
            XDialog.alert("Mã không tồn tại!");
        }else {
           if(XDialog.confirm("Bạn muốn cập nhật mục này?")) {
            supplierDao.update(this.getSuppl());
            contactDao.update(this.getSupplContact());
            this.fillToTable();
            } 
        }
        
    }
    
   public Supplier getSuppl() {
       SupplierDTO entity = this.getForm();
       
       Supplier supplier = new Supplier();
       supplier.setSupplierID(entity.getSupplierID());
       supplier.setSupplierName(entity.getSupplierName());
       supplier.setNumberOfBooks(entity.getNumberOfBooks());
       
       return supplier;
   }
   
   public SupplierContact getSupplContact() {
       SupplierDTO entity = this.getForm();
       
       SupplierContact supplContact = new SupplierContact();
       supplContact.setContactID(entity.getContactID());
       supplContact.setEmail(entity.getEmail());
       supplContact.setPhone(entity.getPhone());
       supplContact.setSupplier(this.getSuppl());
       
       return supplContact;
   }

    @Override
    public void delete() {
        SupplierDTO entity = this.getForm();
        
        if(entity != null) {
            if(XDialog.confirm("Bạn có chắc chắn muốn xóa mục này?")) {
             supplierDao.deleteById(entity.getSupplierID());
             JOptionPane.showMessageDialog(this, "Đã xóa thành công!");
             this.fillToTable();
             this.clear();
            }
        }else XDialog.alert("Không tìm thấy nhà cung cấp!");
        
   
    }

    @Override
    public void clear() {
        this.setForm(new SupplierDTO());
    }

    @Override
    public void setEditable(boolean editable) {
        txtSupplID.setEditable(editable);
        txtSupplName.setEditable(editable);
        spnQuantity.setEnabled(editable);
        
        txtContactID.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
    }

    @Override
    public void fillToTable() {
        supplierList = viewDao.findAll();
        
        model = (DefaultTableModel) tblContacts.getModel();
        model.setRowCount(0);
        
        for(SupplierDTO suppl : supplierList) {
            Object[] rowData = {
                suppl.getContactID(),
                suppl.getSupplierName(),
                suppl.getEmail(),
                suppl.getPhone()
            };
            model.addRow(rowData);
        }
    }

    @Override
    public void edit() {
        supplierList = viewDao.findAll();
        
        SupplierDTO entity = supplierList.get(tblContacts.getSelectedRow());
        
        this.setForm(entity);
        tabs.setSelectedIndex(1);
    }

    @Override
    public void checkAll() {
        for(int i=0; i<tblContacts.getRowCount(); i++) {
            tblContacts.setValueAt(true, i, 4);
        }
    }

    @Override
    public void uncheckAll() {
        for(int i=0; i<tblContacts.getRowCount(); i++) {
            tblContacts.setValueAt(false, i, 4);
        }
    }

    @Override
    public void deleteCheckedItems() {
        supplierList = viewDao.findAll();
        
        SupplierDTO entity = supplierList.get(tblContacts.getSelectedRow());
        
        supplierDao.deleteById(entity.getSupplierID());
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        index--;
        this.moveTo(index);
    }

    @Override
    public void moveNext() {
        index++;
        this.moveTo(index);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblContacts.getRowCount() - 1);
    }

    @Override
    public void moveTo(int rowIndex) {
        index = rowIndex;
        
        if(index < 0) index = tblContacts.getRowCount() -1;
        else if(index > tblContacts.getRowCount() -1) index = 0;
        
        supplierList = viewDao.findAll();
        
        SupplierDTO entity = supplierList.get(index);
        
        this.setForm(entity);
    }

    @Override
    public void findBySupplierName(String supplierName) {
        supplierList =  viewDao.findBySupplierName(supplierName);
        
         if(supplierList != null && !supplierList.isEmpty()) {
             model = (DefaultTableModel) tblContacts.getModel();
             model.setRowCount(0);
        
            for(SupplierDTO suppl : supplierList) {
                Object[] rowData = {
                    suppl.getContactID(),
                    suppl.getSupplierName(),
                    suppl.getEmail(),
                    suppl.getPhone()
                };
                model.addRow(rowData);
                }
        }else {
             JOptionPane.showMessageDialog(this, "Không tìm thấy nhà xuất bản", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
             this.clearText();
         }
        
    }
        
    

    @Override
    public void findBySupplierID(Integer supplierID) {
        supplierList = viewDao.findBySupplierID(supplierID);
        
        if(supplierList != null && !supplierList.isEmpty()) {
             model = (DefaultTableModel) tblContacts.getModel();
             model.setRowCount(0);
        
            for(SupplierDTO suppl : supplierList) {
                Object[] rowData = {
                    suppl.getContactID(),
                    suppl.getSupplierName(),
                    suppl.getEmail(),
                    suppl.getPhone()
                };
                model.addRow(rowData);
            }
        }else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy nhà xuất bản", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            this.clearText();
        }
       
    }

    @Override
    public void findByContactID(Integer contactID) {
         SupplierDTO  contact = viewDao.findByContactID(contactID);
         
         
       if(contact != null) {
           model = (DefaultTableModel) tblContacts.getModel();
           model.setRowCount(0);
           
            Object[] rowData = {
                contact.getContactID(),
                contact.getSupplierName(),
                contact.getEmail(),
                contact.getPhone()
            };
            model.addRow(rowData);
       }else {
           JOptionPane.showMessageDialog(this, "Không tìm thấy liên hệ!", "Không hợp lệ1", JOptionPane.ERROR_MESSAGE);
           this.clearText();
       }
    }
    
    public void clearText() {
        txtFilterID.setText("");
        txtFilterContactID.setText("");
        txtFilterSupplName.setText("");
    }
    
    
    @Override
    public void saveForm() {
        if(validateInputForm()) {
            SupplierDTO entity = this.getForm();
        
            //Set giá trị cho entity Supplier
            Supplier supplier = new Supplier();
            supplier.setSupplierID(entity.getSupplierID());
            supplier.setSupplierName(entity.getSupplierName());
            supplier.setNumberOfBooks(entity.getNumberOfBooks());

            //Set giá trị cho entity SupplierContact
            SupplierContact contact = new SupplierContact();
            contact.setContactID(entity.getContactID());
            contact.setEmail(entity.getEmail());
            contact.setPhone(entity.getPhone());
            contact.setSupplier(supplier);

            tempContactList.add(contact);
            this.setEditable(false);
        }
        
    }
    
    @Override
    public boolean validateInputForm() {
        if(txtSupplID.getText().trim().isBlank() || txtContactID.getText().trim().isBlank() || txtSupplName.getText().trim().isBlank() ||
                txtEmail.getText().trim().isBlank() || txtPhone.getText().trim().isBlank()) {
            JOptionPane.showMessageDialog(this, "Không được để trống ô nhập!", "Không hợp lệ!", 0);
            return false;
        } 
        return true;
    }

    @Override
    public boolean validateForm() {
        int count = 0;
        if (!txtFilterID.getText().trim().isBlank()) count++;
        if (!txtFilterContactID.getText().trim().isBlank()) count++;
        if (!txtFilterSupplName.getText().trim().isBlank()) count++;

        if (count == 0) {
            JOptionPane.showMessageDialog(this, "Không được để trống ô nhập!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (count > 1) {
            JOptionPane.showMessageDialog(this, "Chỉ được nhập một ô tìm kiếm duy nhất!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

  public void exportExcel() {
          if(tblContacts.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            return;
            }
            String[] header = {"Mã danh bạ", "Tên NXB", "Email", "Số điện thoại"};
            supplierList = viewDao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(SupplierDTO obj : supplierList) {
                   Object[] row = {
                      obj.getContactID(),
                       obj.getSupplierName(),
                       obj.getEmail(),
                       obj.getPhone()
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý nhà cung cấp";
            String title = "Chi tiết thông tin nhà cung cấp";

            XFile.exportFile(this, title, header, fileName, listObj);
    }

}
