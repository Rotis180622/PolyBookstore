/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.RevenueController;
import com.mycompany.projectone.dao.impl.RevenueDAOImpl;
import com.mycompany.projectone.entity.Revenue;
import com.mycompany.projectone.util.TimeRange;
import com.mycompany.projectone.util.XDate;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public final class RevenueManagerJDialog extends javax.swing.JDialog implements RevenueController {

    /**
     * Creates new form RevenueManagerJDialog
     */
    public RevenueManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        pnlByCategory = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblByCategory = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblByEmp = new javax.swing.JTable();
        lblBegin = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        lblEnd = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        cboTimeRange = new javax.swing.JComboBox<>();
        btnExcel1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Báo cáo doanh thu");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblByCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã thể loại", "Tên thể loại", "Doanh thu", "Số lượng", "Giá thấp nhất", "Giá cao nhất", "Giá trung bình"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblByCategory);

        javax.swing.GroupLayout pnlByCategoryLayout = new javax.swing.GroupLayout(pnlByCategory);
        pnlByCategory.setLayout(pnlByCategoryLayout);
        pnlByCategoryLayout.setHorizontalGroup(
            pnlByCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );
        pnlByCategoryLayout.setVerticalGroup(
            pnlByCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlByCategoryLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addGap(48, 48, 48))
        );

        tabs.addTab("Doanh thu theo loại", pnlByCategory);

        tblByEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Tổng số bill", "Bill đầu tiên", "Bill gần nhất"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblByEmp);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        tabs.addTab("Doanh thu theo nhân viên", jPanel2);

        lblBegin.setText("Từ ngày");

        txtBegin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBeginActionPerformed(evt);
            }
        });

        lblEnd.setText("Đến ngày:");

        txtEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEndActionPerformed(evt);
            }
        });

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        cboTimeRange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Năm nay", " " }));
        cboTimeRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTimeRangeItemStateChanged(evt);
            }
        });
        cboTimeRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangeActionPerformed(evt);
            }
        });

        btnExcel1.setBackground(new java.awt.Color(51, 153, 0));
        btnExcel1.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        btnExcel1.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel1.setText("Xuất Excel");
        btnExcel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblBegin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEnd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFilter))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExcel1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBegin)
                    .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnd)
                    .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBeginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBeginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBeginActionPerformed

    private void txtEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEndActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEndActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        this.fillRevenue();
    }//GEN-LAST:event_btnFilterActionPerformed

    private void cboTimeRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTimeRangeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTimeRangeItemStateChanged

    private void cboTimeRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimeRangeActionPerformed
        this.selectTimeRange();
    }//GEN-LAST:event_cboTimeRangeActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnExcel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcel1ActionPerformed
        Date begin = XDate.parse(txtBegin.getText(), "yyyy-MM-dd");
        Date end = XDate.parse(txtEnd.getText(), "yyyy-MM-dd");
        int index = tabs.getSelectedIndex();
        this.exportExcel(begin, end, index);
    }//GEN-LAST:event_btnExcel1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RevenueManagerJDialog dialog = new RevenueManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcel1;
    private javax.swing.JButton btnFilter;
    private javax.swing.JComboBox<String> cboTimeRange;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBegin;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JPanel pnlByCategory;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblByCategory;
    private javax.swing.JTable tblByEmp;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtEnd;
    // End of variables declaration//GEN-END:variables

    RevenueDAOImpl dao = new RevenueDAOImpl();
    List<Revenue.ByCategory> categories = List.of();
    List<Revenue.ByEmp> empList = List.of();
    
    DefaultTableModel model;
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
    }

    @Override
  public void selectTimeRange() {
      TimeRange timeRange = null;

      String selected = (String) cboTimeRange.getSelectedItem();
      if ("Hôm nay".equals(selected)) {
          timeRange = TimeRange.today();
      } else if ("Tuần này".equals(selected)) {
          timeRange = TimeRange.thisWeek();
      } else if ("Tháng này".equals(selected)) {
          timeRange = TimeRange.thisMonth();
      } else if ("Quý này".equals(selected)) {
          timeRange = TimeRange.thisQuarter();
      } else if ("Năm nay".equals(selected)) {
          timeRange = TimeRange.thisYear();
      }

      if (timeRange != null) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        txtBegin.setText(String.valueOf(formatter.format(timeRange.getBegin())));
        txtEnd.setText(String.valueOf(formatter.format(timeRange.getEnd())));
      }
  }


    @Override
    public void fillRevenue() {
        Date begin = XDate.parse(txtBegin.getText(), "yyyy-MM-dd");
        Date end = XDate.parse(txtEnd.getText(), "yyyy-MM-dd");
        int index = tabs.getSelectedIndex();
        switch(index) {
            case 0 ->  {
                this.fillRevenueByCategory(begin, end);
            }
            case 1 ->  {
                this.fillRevenueByEmp(begin, end);
            }
        }
    }
    
    public void fillRevenueByCategory(Date begin, Date end) {
        categories = dao.revenueByCategory(begin, end);
        model = (DefaultTableModel) tblByCategory.getModel();
        model.setRowCount(0);
        
        DecimalFormat df = new DecimalFormat("#,##0.00");
        
        categories.forEach(item -> {
            Object[] rowData = {
                item.getCategoryID(),
                item.getCategoryName(),
                df.format(item.getRevenue().setScale(2, RoundingMode.HALF_UP)),
                item.getQuantity(),
                df.format(item.getMinPrice().setScale(2, RoundingMode.HALF_UP)),
                df.format(item.getMaxPrice().setScale(2,RoundingMode.HALF_UP)),
                df.format(item.getAvgPrice().setScale(2, RoundingMode.HALF_UP))
            };
            model.addRow(rowData);
            System.out.println("Revenue: " + item.getRevenue());
            System.out.println("Formatted: " + df.format(item.getRevenue()));
            List<Revenue.ByCategory> list = dao.revenueByCategory(begin, end);
            for (Revenue.ByCategory r : list) {
                System.out.println("Category: " + r.getCategoryName() + " - Revenue: " + r.getRevenue());
            }
        });
        
    }
    
    public void fillRevenueByEmp(Date begin, Date end) {
        empList = dao.revenueByEmp(begin, end);
        model = (DefaultTableModel) tblByEmp.getModel();
        model.setRowCount(0);
        
        empList.forEach(item -> {
            Object[] rowData = {
                item.getEmployeeID(),
                item.getEmpName(),
                item.getNumOfBills(),
                item.getFirstBill(),
                item.getRecentBill()
            };
            model.addRow(rowData);
        });     
    }
    
    public void exportExcel(Date begin, Date end, int tabIndex) {
        String[] header;
        List<Object[]> listObj;
        String fileName;
        String title = "Chi tiết doanh thu";

        switch (tabIndex) {
            case 0 -> {
                if (tblByCategory.getRowCount() == 0) {
                    XDialog.alert("Không tìm thấy dữ liệu!");
                    return;
                }

                header = new String[]{
                    "Mã thể loại", "Tên thể loại", "Doanh thu",
                    "Số lượng", "Giá thấp nhất", "Giá cao nhất", "Giá trung bình"
                };

                List<Revenue.ByCategory> list = dao.revenueByCategory(begin, end);
                listObj = new ArrayList<>();

                for (Revenue.ByCategory obj : list) {
                    Object[] row = {
                        obj.getCategoryID(),
                        obj.getCategoryName(),
                        obj.getRevenue(),
                        obj.getQuantity(),
                        obj.getMinPrice(),
                        obj.getMaxPrice(),
                        obj.getAvgPrice()
                    };
                    listObj.add(row);
                }

                fileName = "Quản lý doanh thu theo thể loại";
                XFile.exportFile(this, title, header, fileName, listObj);
            }

            case 1 -> {
                if (tblByEmp.getRowCount() == 0) {
                    XDialog.alert("Không tìm thấy dữ liệu!");
                    return;
                }

                header = new String[]{
                    "Mã nhân viên", "Tên nhân viên", "Tổng số bill",
                    "Bill đầu tiên", "Bill gần nhất"
                };

                List<Revenue.ByEmp> list = dao.revenueByEmp(begin, end);
                listObj = new ArrayList<>();

                for (Revenue.ByEmp obj : list) {
                    Object[] row = {
                        obj.getEmployeeID(),
                        obj.getEmpName(),
                        obj.getNumOfBills(),
                        obj.getFirstBill(),
                        obj.getRecentBill()
                    };
                    listObj.add(row);
                }

                fileName = "Quản lý doanh thu theo nhân viên";
                XFile.exportFile(this, title, header, fileName, listObj);
            }

            default -> {
                XDialog.alert("Tab không hợp lệ!");
            }
        }
    }

}
