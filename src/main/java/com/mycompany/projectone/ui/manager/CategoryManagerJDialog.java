/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.CategoryController;
import com.mycompany.projectone.dao.impl.CategoryDAOImpl;
import com.mycompany.projectone.entity.Categories;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class CategoryManagerJDialog extends javax.swing.JDialog implements CategoryController {

    /**
     * Creates new form CategoryManagerJDialog
     */
    public CategoryManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlInput = new javax.swing.JPanel();
        pnlInputField = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        txtCategoryID = new javax.swing.JTextField();
        lblCategoryName = new javax.swing.JLabel();
        txtCategoryName = new javax.swing.JTextField();
        pnlControlButtons = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategories = new javax.swing.JTable();
        pnlButtons = new javax.swing.JPanel();
        pnlID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QUẢN LÝ THỂ LOẠI");
        setPreferredSize(new java.awt.Dimension(810, 400));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(10, 0));

        pnlInput.setPreferredSize(new java.awt.Dimension(400, 300));
        pnlInput.setLayout(new java.awt.BorderLayout());

        pnlInputField.setPreferredSize(new java.awt.Dimension(100, 300));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setText("Quản lý thể loại sách");

        lblID.setText("Mã thể loại");

        lblCategoryName.setText("Tên thể loại");

        pnlControlButtons.setLayout(new java.awt.GridLayout(0, 4, 10, 10));

        btnCreate.setIcon(new javax.swing.ImageIcon( getClass().getResource("/add.png")));
        btnCreate.setToolTipText("Thêm mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnCreate);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setToolTipText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.png"))); // NOI18N
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnRefresh);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnFirst.setToolTipText("Đến đầu danh sách");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnNext.setToolTipText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png")));
        btnLast.setToolTipText("Đến cuối danh sách");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlControlButtons.add(btnLast);

        javax.swing.GroupLayout pnlInputFieldLayout = new javax.swing.GroupLayout(pnlInputField);
        pnlInputField.setLayout(pnlInputFieldLayout);
        pnlInputFieldLayout.setHorizontalGroup(
            pnlInputFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputFieldLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInputFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputFieldLayout.createSequentialGroup()
                        .addComponent(pnlControlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(pnlInputFieldLayout.createSequentialGroup()
                        .addGroup(pnlInputFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCategoryName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblID, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap(332, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputFieldLayout.createSequentialGroup()
                        .addGroup(pnlInputFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCategoryID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlInputFieldLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblTitle))
                            .addComponent(txtCategoryName))
                        .addGap(99, 99, 99))))
        );
        pnlInputFieldLayout.setVerticalGroup(
            pnlInputFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputFieldLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCategoryName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(pnlControlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput.add(pnlInputField, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlInput, java.awt.BorderLayout.LINE_END);

        pnlTable.setPreferredSize(new java.awt.Dimension(400, 300));
        pnlTable.setRequestFocusEnabled(false);
        pnlTable.setLayout(new java.awt.BorderLayout());

        tblCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã thể loại", "Tên thể loại", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoriesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategories);
        tblCategories.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel columnModel = tblCategories.getColumnModel();

        columnModel.getColumn(1).setPreferredWidth(150);
        columnModel.getColumn(2).setPreferredWidth(50);

        pnlTable.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlButtons.setPreferredSize(new java.awt.Dimension(300, 109));

        pnlID.setText("Nhập mã:");

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnExcel.setBackground(new java.awt.Color(51, 153, 0));
        btnExcel.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        btnExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonsLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(pnlID, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlButtonsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCheckAll)
                            .addComponent(btnExcel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUncheckAll)))
                .addGap(12, 12, 12)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExcel)
                .addGap(6, 6, 6)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pnlID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        javax.swing.ImageIcon icon = com.mycompany.projectone.util.XIcon.getIcon("/search.png",20,20);

        btnSearch.setIcon(icon);

        pnlTable.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnlTable, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void tblCategoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoriesMouseClicked
        this.edit();
    }//GEN-LAST:event_tblCategoriesMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        this.filterByCategoryID(txtID.getText());
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.fillToTable();
        txtID.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.exportExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
        this.fillToTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CategoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CategoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CategoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CategoryManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CategoryManagerJDialog dialog = new CategoryManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategoryName;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlControlButtons;
    private javax.swing.JLabel pnlID;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlInputField;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JTable tblCategories;
    private javax.swing.JTextField txtCategoryID;
    private javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

   CategoryDAOImpl dao = new CategoryDAOImpl();
    List<Categories> categories = List.of();
    DefaultTableModel model;

    public void findById(Integer id) {
        model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0);
        Categories category = dao.findById(id);
        if (category != null) {
            Object[] rowData = {
                category.getCategoryID(),
                category.getCategoryName()
            };
            model.addRow(rowData);
        }
        txtCategoryID.setText("");
    }

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
        this.clear();
    }

    @Override
    public void setForm(Categories entity) {
        txtCategoryID.setText(String.valueOf(entity.getCategoryID()));
        txtCategoryName.setText(entity.getCategoryName());
    }

    @Override
    public Categories getForm() {
        Categories entity = new Categories();
        entity.setCategoryID(Integer.parseInt(txtCategoryID.getText()));
        entity.setCategoryName(txtCategoryName.getText());
        return entity;
    }

    @Override
    public void create() {
        Categories category = this.getForm();
        categories = dao.findAll();
        
        for(Categories item : categories) {
            if(item.getCategoryName().equalsIgnoreCase(category.getCategoryName())) {
                XDialog.alert("Thể loại sách này đã tồn tại!");
                return; 
            }       
        }
        dao.create(category);
        XDialog.alert("Thêm thành công");
        this.fillToTable();
        this.clear();
    }

    @Override
    public void update() {
        Categories category = this.getForm();
        categories = dao.findAll();
        
        for(Categories item : categories) {
            if(item.getCategoryName().equalsIgnoreCase(category.getCategoryName())) {
                XDialog.alert("Thể loại sách này đã tồn tại!");
                return; 
            }       
        }
        dao.update(category);
        XDialog.alert("Cập nhật thành công!");
        this.fillToTable(); 
        this.clear();
        
    }

    @Override
    public void delete() {
        if (XDialog.confirm("Bạn muốn xóa mục đã chọn?")) {
            Integer categoryID = Integer.valueOf(txtCategoryID.getText());
            dao.deleteById(categoryID);
            XDialog.alert("Xóa thành công!");
            this.fillToTable();
            this.clear();
        }
    }

    @Override
    public void clear() {
        this.setForm(new Categories());
        this.setEditable(false);
    }

    @Override
    public void setEditable(boolean editable) {
        btnFirst.setEnabled(editable);
        btnNext.setEnabled(editable);
        btnPrev.setEnabled(editable);
        btnLast.setEnabled(editable);

        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);

    }

    @Override
    public void fillToTable() {
        model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0);

        categories = dao.findAll();
        categories.forEach(category -> {
            Object[] rowData = {
                category.getCategoryID(),
                category.getCategoryName()
            };
            model.addRow(rowData);
        });
        this.clear();
    }

    @Override
    public void edit() {
        Categories category = categories.get(tblCategories.getSelectedRow());
        this.setForm(category);
        this.setEditable(true);
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        this.moveTo(tblCategories.getSelectedRow() - 1);
    }

    @Override
    public void moveNext() {
        this.moveTo(tblCategories.getSelectedRow() + 1);
    }

    @Override
    public void moveLast() {
        this.moveTo(tblCategories.getRowCount() - 1);
    }

    @Override
    public void moveTo(int rowIndex) {
        if (rowIndex < 0) {
            this.moveLast();
        } else if (rowIndex >= tblCategories.getRowCount()) {
            this.moveFirst();
        } else {
            tblCategories.clearSelection();
            tblCategories.setRowSelectionInterval(rowIndex, rowIndex);
            this.edit();
        }
    }

     @Override
    public void checkAll() {
        setCheckedAll(true);
        clearSelection();
    }

    @Override
    public void uncheckAll() {
        setCheckedAll(false);
        clearSelection();
    }

    @Override
    public void deleteCheckedItems() {
        int[] rows = tblCategories.getSelectedRows();

        if (XDialog.confirm("Bạn có chắc chắn muốn xóa?")) {
            for (int i = rows.length - 1; i >= 0; i--) { // Xóa từ dưới lên để tránh lỗi index
                int row = rows[i];
                Categories category = categories.get(row);
                dao.deleteById(category.getCategoryID());
                categories.remove(row);
            }
        }
    }

    private void setCheckedAll(boolean checked) {
        for (int i = 0; i < tblCategories.getRowCount(); i++) {
            tblCategories.setValueAt(checked, i, 2); 
            // 2 ở đây giả sử là cột checkbox, bệ hạ sửa lại theo vị trí thực tế
        }
    }

    private void clearSelection() {
        tblCategories.clearSelection();
    }
    

    @Override
    public void filterByCategoryID(String keyword) {
        DefaultTableModel model = (DefaultTableModel) tblCategories.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ

        for (Categories category : categories) {
            if (String.valueOf(category.getCategoryID())
                    .equalsIgnoreCase(keyword.toLowerCase())) {

                model.addRow(new Object[]{
                        category.getCategoryID(),
                        category.getCategoryName(),
                        false // giả sử đây là cột checkbox
                });
            }
        }
    }

    public void exportExcel() {
          if(tblCategories.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            return;
            }
            String[] header = {"Mã thể loại", "Tên thể loại"};
            List<Categories> list = dao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(Categories obj : list) {
                   Object[] row = {
                      obj.getCategoryID(),
                       obj.getCategoryName()
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý thể loại sách";
            String title = "Chi tiết thể loại sách";

            XFile.exportFile(this, title, header, fileName, listObj);
    }

}
