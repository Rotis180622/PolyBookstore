/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.StockController;
import com.mycompany.projectone.dao.impl.BookDAOImpl;
import com.mycompany.projectone.dao.impl.StockDAOImpl;
import com.mycompany.projectone.entity.Book;
import com.mycompany.projectone.entity.Stock;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class StockManagerJDialog extends javax.swing.JDialog implements StockController{

    /**
     * Creates new form StockManagerJDialog
     */
    public StockManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tabs = new javax.swing.JTabbedPane();
        pnlList = new javax.swing.JPanel();
        pnlFilter = new javax.swing.JPanel();
        lblFilterID = new javax.swing.JLabel();
        txtFilterID = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        pnlCheckBtn = new javax.swing.JPanel();
        btnCheckAll = new javax.swing.JButton();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteChecked = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStocks = new javax.swing.JTable();
        pnlForm = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlInput = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        lblBookID = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        lblLastUpdated = new javax.swing.JLabel();
        dateLastUpdated = new com.toedter.calendar.JDateChooser();
        lblTitle = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý tồn kho");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlList.setLayout(new java.awt.BorderLayout(0, 10));

        pnlFilter.setPreferredSize(new java.awt.Dimension(426, 30));
        pnlFilter.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        lblFilterID.setText("Nhập mã tồn kho:");
        pnlFilter.add(lblFilterID);
        pnlFilter.add(txtFilterID);

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        pnlFilter.add(btnFilter);

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        pnlFilter.add(btnClear);

        pnlList.add(pnlFilter, java.awt.BorderLayout.PAGE_START);

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteChecked.setText("Xóa các mục đã chọn");
        btnDeleteChecked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedActionPerformed(evt);
            }
        });

        btnExcel.setBackground(new java.awt.Color(102, 204, 0));
        btnExcel.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        btnExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCheckBtnLayout = new javax.swing.GroupLayout(pnlCheckBtn);
        pnlCheckBtn.setLayout(pnlCheckBtnLayout);
        pnlCheckBtnLayout.setHorizontalGroup(
            pnlCheckBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCheckBtnLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(pnlCheckBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExcel)
                    .addGroup(pnlCheckBtnLayout.createSequentialGroup()
                        .addComponent(btnCheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUncheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteChecked)))
                .addGap(25, 25, 25))
        );
        pnlCheckBtnLayout.setVerticalGroup(
            pnlCheckBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckBtnLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnlCheckBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteChecked))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcel)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pnlList.add(pnlCheckBtn, java.awt.BorderLayout.PAGE_END);

        tblStocks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã tồn kho", "Mã sách", "Số lượng", "Cập nhật lần cuối", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblStocks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStocksMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStocks);

        pnlList.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabs.addTab("Hàng tồn kho", pnlList);

        pnlForm.setLayout(new java.awt.BorderLayout());

        pnlButtons.setLayout(new java.awt.GridLayout(0, 4, 10, 10));

        btnCreate.setIcon(new javax.swing.ImageIcon( getClass().getResource("/add.png")));
        btnCreate.setToolTipText("Thêm mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCreate);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setToolTipText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.png"))); // NOI18N
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(btnRefresh);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png")));
        btnFirst.setToolTipText("Đến đầu danh sách");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnNext.setToolTipText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnLast.setToolTipText("Đến cuối danh sách");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);

        pnlForm.add(pnlButtons, java.awt.BorderLayout.PAGE_END);

        pnlInput.setLayout(new java.awt.GridBagLayout());

        lblID.setText("Mã tồn kho");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        pnlInput.add(lblID, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 0);
        pnlInput.add(txtID, gridBagConstraints);

        lblBookID.setText("Mã sách");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 6, 0);
        pnlInput.add(lblBookID, gridBagConstraints);

        txtBookID.setPreferredSize(new java.awt.Dimension(10, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 30);
        pnlInput.add(txtBookID, gridBagConstraints);

        lblQuantity.setText("Số lượng");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        pnlInput.add(lblQuantity, gridBagConstraints);

        lblLastUpdated.setText("Cập nhật");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 30, 0, 0);
        pnlInput.add(lblLastUpdated, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        pnlInput.add(dateLastUpdated, gridBagConstraints);

        lblTitle.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblTitle.setText("QUẢN LÝ TỒN KHO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 11, 0);
        pnlInput.add(lblTitle, gridBagConstraints);

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1000, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        pnlInput.add(spnQuantity, gridBagConstraints);

        pnlForm.add(pnlInput, java.awt.BorderLayout.CENTER);

        tabs.addTab("Biểu mẫu", pnlForm);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void btnDeleteCheckedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedActionPerformed
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        this.findByID(Integer.valueOf(txtFilterID.getText()));
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.clearTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void tblStocksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStocksMouseClicked
        this.edit();
        this.setEditable(true);
    }//GEN-LAST:event_tblStocksMouseClicked

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.exportExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
        this.fillToTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                StockManagerJDialog dialog = new StockManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteChecked;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private com.toedter.calendar.JDateChooser dateLastUpdated;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblFilterID;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblLastUpdated;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlCheckBtn;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlList;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblStocks;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtFilterID;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

    List<Stock> stockList = List.of();
    
    StockDAOImpl stockDao = new StockDAOImpl();
    BookDAOImpl bookDao = new BookDAOImpl();
    
    DefaultTableModel model;
    
    int index =0;
    
    @Override
    public void open() {
        this.fillToTable();
        this.setLocationRelativeTo(null);
        this.setEditable(false);
    }

    @Override
    public void setForm(Stock entity) {
        txtID.setText(String.valueOf(entity.getStockID()));
        txtBookID.setText(String.valueOf(entity.getBookID()));
        spnQuantity.setValue(entity.getQuantity());
        dateLastUpdated.setDate(entity.getLastUpdated());
    }

    @Override
    public Stock getForm() {
        Stock stock = new Stock();
        
        stock.setStockID(Integer.parseInt(txtID.getText()));
        stock.setBookID(Integer.parseInt(txtBookID.getText()));
        stock.setQuantity((Integer)spnQuantity.getValue());
        stock.setLastUpdated(dateLastUpdated.getDate());
        
        return stock;
    }

   @Override
    public void create() {
        Stock stock = this.getForm();

        if (stock == null) {
            XDialog.alert("Dữ liệu nhập không hợp lệ!");
            return;
        }

        Stock checker = stockDao.findById(stock.getStockID());   // kiểm tra trùng khoá chính
        if (checker != null) {
            XDialog.alert("Mã tồn kho đã tồn tại!");
            this.clear();
            return;
        }

        Book book = bookDao.findById(stock.getBookID());         // kiểm tra tồn tại mã sách
        if (book == null) {
            XDialog.alert("Không tìm thấy mã sách trong hệ thống!");
            this.clear();
            return;
        }

        // Nếu mọi thứ đều hợp lệ
        stockDao.create(stock);
        XDialog.alert("Đã thêm thành công!");
        this.fillToTable();
    }


    @Override
    public void update() {
        Stock stock = this.getForm();
        
        if (stock == null) {
            JOptionPane.showMessageDialog(this, 
                "Dữ liệu nhập không hợp lệ!", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
        } else if (bookDao.findById(stock.getBookID()) == null) {
            JOptionPane.showMessageDialog(this, 
                "Không tìm thấy mã sách trong hệ thống!", 
                "Không hợp lệ!", 
                JOptionPane.ERROR_MESSAGE);
            this.clear();
        } else {
            if (XDialog.confirm("Bạn muốn cập nhật mục này?")) {
                stockDao.update(stock);
                XDialog.alert("Đã cập nhật thành công!");
                this.fillToTable();
            }
        }
    }


    @Override
    public void delete() {
        Stock stock = this.getForm();
        
        if(stock != null) {
            if(XDialog.confirm("Bạn có chắc chắn muốn xóa?")) {
                stockDao.deleteById(stock.getStockID());
                XDialog.alert("Đã xóa thành công!");
                this.fillToTable();
            }
        }else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy mã tồn kho!", "Không hợp lệ!", JOptionPane.ERROR_MESSAGE);
            this.clear();
        }
        
    }

    @Override
    public void clear() {
        txtID.setText("");
        txtBookID.setText("");
        spnQuantity.setValue(0);
        dateLastUpdated.setDate(null);
    }

    @Override
    public void setEditable(boolean editable) {
        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);
        
    }

    @Override
    public void fillToTable() {
        stockList = stockDao.findAll();
        
        model = (DefaultTableModel) tblStocks.getModel();
        model.setRowCount(0);
        
        for(Stock stock : stockList) {
            Object[] rowData = {
                stock.getStockID(),
                stock.getBookID(),
                stock.getQuantity(),
                stock.getLastUpdated()
            };
            model.addRow(rowData);
        }
    }

    @Override
    public void edit() {
        stockList = stockDao.findAll();
        
        Stock entity = stockList.get(tblStocks.getSelectedRow());
        
        this.setForm(entity);
        tabs.setSelectedIndex(1);
    }

    @Override
    public void checkAll() {
        for(int i=0; i<tblStocks.getRowCount(); i++) {
            tblStocks.setValueAt(true, i, 4);
        }
    }

    @Override
    public void uncheckAll() {
        for(int i=0; i<tblStocks.getRowCount(); i++) {
            tblStocks.setValueAt(false, i, 4);
        }
    }

    @Override
    public void deleteCheckedItems() {
        stockList = stockDao.findAll();
        
        Stock entity = stockList.get(tblStocks.getSelectedRow());
        
        stockDao.deleteById(entity.getStockID());
    }

    @Override
    public void moveFirst() {
        index = 0;
        this.moveTo(index);
    }

    @Override
    public void movePrevious() {
        index --;
        this.moveTo(index);
    }

    @Override
    public void moveNext() {
        index++;
        this.moveTo(index);
    }

    @Override
    public void moveLast() {
        index = tblStocks.getRowCount() - 1;
        this.moveTo(index);
    }

    @Override
    public void moveTo(int rowIndex) {
        index = rowIndex;
        
        if(index < 0) index = tblStocks.getRowCount() -1;
        else if(index > tblStocks.getRowCount() -1) index = 0;
        
        stockList = stockDao.findAll();
        
        Stock entity = stockList.get(index);
        
        this.setForm(entity);
    }
    
    @Override
    public void findByID(Integer ID) {
        Stock stock = stockDao.findById(ID);
        
        if(stock != null) {
             model = (DefaultTableModel) tblStocks.getModel();
             model.setRowCount(0);
           
            Object[] rowData = {
                stock.getStockID(),
                stock.getBookID(),
                stock.getQuantity(),
                stock.getLastUpdated()
            };
            model.addRow(rowData);
            
        }else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy nhà xuất bản", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
            this.clearTable();
        }
    }

    private void clearTable() {
        txtFilterID.setText("");
        this.fillToTable();
    }
    
    public void exportExcel() {
          if(tblStocks.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            return;
            }
            String[] header = {"Mã tồn kho", "Mã sách", "Số lượng", "Cập nhật lần cuối"};
            List<Stock> list = stockDao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(Stock obj : list) {
                   Object[] row = {
                      obj.getStockID(),
                       obj.getBookID(),
                       obj.getQuantity(),
                       obj.getLastUpdated()
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý tồn kho";
            String title = "Chi tiết thông tin tồn kho";

            XFile.exportFile(this, title, header, fileName, listObj);
    }
}
