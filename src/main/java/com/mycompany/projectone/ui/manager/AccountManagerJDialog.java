/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.controller.AccountController;
import com.mycompany.projectone.dao.AccountDAO;
import com.mycompany.projectone.dao.impl.AccountDAOImpl;
import com.mycompany.projectone.entity.Account;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.util.XFile;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class AccountManagerJDialog extends javax.swing.JDialog implements AccountController {

    /**
     * Creates new form AccountManagerJDialog
     */
    public AccountManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groStatus = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        pnlAccountList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAccounts = new javax.swing.JTable();
        btnUncheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        lblFilterAccountID = new javax.swing.JLabel();
        txtFilterAccountID = new javax.swing.JTextField();
        lblEmpID = new javax.swing.JLabel();
        txtFilterEmpID = new javax.swing.JTextField();
        btnCheckAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExcel = new javax.swing.JButton();
        pnlAccountCreation = new javax.swing.JPanel();
        lblAccountName = new javax.swing.JLabel();
        txtAccountName = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        rdoInactive = new javax.swing.JRadioButton();
        rdoActive = new javax.swing.JRadioButton();
        lblAccountName1 = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        lblAccountID = new javax.swing.JLabel();
        txtAccountID = new javax.swing.JTextField();
        lblRole = new javax.swing.JLabel();
        rdoManager = new javax.swing.JRadioButton();
        rdoEmp = new javax.swing.JRadioButton();
        pnlButtons = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý tài khoản");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã tài khoản", "Tên tài khoản", "Mã nhân viên", "Trạng thái", "Vai trò", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAccounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAccountsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAccounts);

        btnUncheckAll.setText("Bỏ chọn tất cả");
        btnUncheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUncheckAllActionPerformed(evt);
            }
        });

        btnDeleteCheckedItems.setText("Xóa các mục đã chọn");
        btnDeleteCheckedItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCheckedItemsActionPerformed(evt);
            }
        });

        lblFilterAccountID.setText("Nhập mã tài khoản");

        txtFilterAccountID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterAccountIDActionPerformed(evt);
            }
        });

        lblEmpID.setText("Nhập mã nhân viên");

        btnCheckAll.setText("Chọn tất cả");
        btnCheckAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckAllActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExcel.setBackground(new java.awt.Color(51, 204, 0));
        btnExcel.setFont(new java.awt.Font("Segoe UI Black", 1, 12)); // NOI18N
        btnExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnExcel.setText("Xuất Excel");
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAccountListLayout = new javax.swing.GroupLayout(pnlAccountList);
        pnlAccountList.setLayout(pnlAccountListLayout);
        pnlAccountListLayout.setHorizontalGroup(
            pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
            .addGroup(pnlAccountListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccountListLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnExcel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUncheckAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteCheckedItems)
                        .addContainerGap())
                    .addGroup(pnlAccountListLayout.createSequentialGroup()
                        .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFilterAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFilterAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAccountListLayout.createSequentialGroup()
                                .addComponent(txtFilterEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlAccountListLayout.setVerticalGroup(
            pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccountListLayout.createSequentialGroup()
                        .addComponent(lblFilterAccountID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFilterAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAccountListLayout.createSequentialGroup()
                        .addComponent(lblEmpID)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAccountListLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFilterEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)
                            .addComponent(btnClear))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAccountListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUncheckAll)
                    .addComponent(btnDeleteCheckedItems)
                    .addComponent(btnCheckAll)
                    .addComponent(btnExcel))
                .addGap(14, 14, 14))
        );

        tabs.addTab("Danh sách tài khoản", pnlAccountList);

        lblAccountName.setText("Tên tài khoản");

        txtAccountName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAccountNameActionPerformed(evt);
            }
        });

        lblStatus.setText("Trạng thái");

        groStatus.add(rdoInactive);
        rdoInactive.setText("Hủy");
        rdoInactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoInactiveActionPerformed(evt);
            }
        });

        groStatus.add(rdoActive);
        rdoActive.setText("Hoạt động");
        rdoActive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoActiveActionPerformed(evt);
            }
        });

        lblAccountName1.setText("Mã nhân viên");

        txtEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpIDActionPerformed(evt);
            }
        });

        lblAccountID.setText("Mã tài khoản");

        txtAccountID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAccountIDActionPerformed(evt);
            }
        });

        lblRole.setText("Vai trò");

        rdoManager.setText("Quản lý");

        rdoEmp.setText("Nhân viên");

        pnlButtons.setLayout(new java.awt.GridLayout(2, 4, 10, 10));

        btnCreate.setIcon(new javax.swing.ImageIcon( getClass().getResource("/add.png")));
        btnCreate.setToolTipText("Thêm mới");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnCreate);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/up.png"))); // NOI18N
        btnUpdate.setToolTipText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlButtons.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete.png"))); // NOI18N
        btnDelete.setToolTipText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlButtons.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh.png"))); // NOI18N
        btnRefresh.setToolTipText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        pnlButtons.add(btnRefresh);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnLast.setToolTipText("Đến cuối danh sách");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlButtons.add(btnLast);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnNext.setToolTipText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlButtons.add(btnNext);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnPrev.setToolTipText("Trước");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlButtons.add(btnPrev);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png")));
        btnFirst.setToolTipText("Đến đầu danh sách");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlButtons.add(btnFirst);

        javax.swing.GroupLayout pnlAccountCreationLayout = new javax.swing.GroupLayout(pnlAccountCreation);
        pnlAccountCreation.setLayout(pnlAccountCreationLayout);
        pnlAccountCreationLayout.setHorizontalGroup(
            pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoActive)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoInactive)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                        .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                                .addComponent(lblAccountName1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtEmpID, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlAccountCreationLayout.createSequentialGroup()
                                        .addComponent(lblAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtAccountID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                                .addGap(44, 44, 44)))
                        .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rdoManager, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))))
            .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlAccountCreationLayout.setVerticalGroup(
            pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccountID)
                    .addComponent(lblRole))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAccountID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoManager)
                    .addComponent(rdoEmp))
                .addGap(29, 29, 29)
                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                        .addComponent(lblAccountName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAccountCreationLayout.createSequentialGroup()
                        .addComponent(lblAccountName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlAccountCreationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(rdoActive)
                    .addComponent(rdoInactive))
                .addGap(19, 19, 19)
                .addComponent(pnlButtons, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab("Biểu mẫu", pnlAccountCreation);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUncheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUncheckAllActionPerformed
        this.uncheckAll();
    }//GEN-LAST:event_btnUncheckAllActionPerformed

    private void btnDeleteCheckedItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCheckedItemsActionPerformed
        this.deleteCheckedItems();
    }//GEN-LAST:event_btnDeleteCheckedItemsActionPerformed

    private void txtAccountNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAccountNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAccountNameActionPerformed

    private void rdoInactiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoInactiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoInactiveActionPerformed

    private void rdoActiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoActiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoActiveActionPerformed

    private void txtEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpIDActionPerformed

    private void txtAccountIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAccountIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAccountIDActionPerformed

    private void btnCheckAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckAllActionPerformed
        this.checkAll();
    }//GEN-LAST:event_btnCheckAllActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblAccountsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAccountsMouseClicked
        if(evt.getClickCount() == 2) {
            this.edit();
        }
    }//GEN-LAST:event_tblAccountsMouseClicked

    private void txtFilterAccountIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterAccountIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterAccountIDActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if(!txtFilterAccountID.getText().isBlank() && txtFilterEmpID.getText().isBlank()) {
            this.findByAccountID(Integer.valueOf(txtFilterAccountID.getText()));
        }else if(txtFilterAccountID.getText().isBlank() && !txtFilterEmpID.getText().isBlank()) {
            this.findByEmpID(Integer.valueOf(txtFilterEmpID.getText()));
        }else if(txtFilterAccountID.getText().isBlank() && txtFilterEmpID.getText().isBlank()) {
            JOptionPane.showMessageDialog(this,"Không được để trống ô nhập", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
        } else {
            this.fillToTable();
        }
      
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtFilterAccountID.setText("");
        txtFilterEmpID.setText("");
        this.fillToTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.clear();
        this.fillToTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.moveLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.moveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.movePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.moveFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        RegisterAccountJDialog register = new RegisterAccountJDialog(new javax.swing.JFrame(), true);
        register.setVisible(true);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        this.exportExcel();
    }//GEN-LAST:event_btnExcelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AccountManagerJDialog dialog = new AccountManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUncheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup groStatus;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAccountID;
    private javax.swing.JLabel lblAccountName;
    private javax.swing.JLabel lblAccountName1;
    private javax.swing.JLabel lblEmpID;
    private javax.swing.JLabel lblFilterAccountID;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlAccountCreation;
    private javax.swing.JPanel pnlAccountList;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JRadioButton rdoActive;
    private javax.swing.JRadioButton rdoEmp;
    private javax.swing.JRadioButton rdoInactive;
    private javax.swing.JRadioButton rdoManager;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblAccounts;
    private javax.swing.JTextField txtAccountID;
    private javax.swing.JTextField txtAccountName;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtFilterAccountID;
    private javax.swing.JTextField txtFilterEmpID;
    // End of variables declaration//GEN-END:variables

    AccountDAO dao = new AccountDAOImpl();
    List<Account> accounts = List.of();
    
    DefaultTableModel model;
    
    public void findByEmpID(Integer id) {
        model = (DefaultTableModel) tblAccounts.getModel();
        model.setRowCount(0);
        Account account = dao.findByEmpID(id);
        
        if(account!=null) {
            Object[] rowData = {
               account.getAccountID(),
               account.getUsername(),
               account.getEmployeeID(),
               account.isActive() ? "Kích hoạt" : "Hủy",
               account.isRole() ? "Quản lý" : "Nhân viên"
           };
            model.addRow(rowData);
        }else JOptionPane.showMessageDialog(this, "Không tìm thấy tài khoản!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);
        
        txtFilterEmpID.setText("");
    }
    
     public void findByAccountID(Integer id) {
        model = (DefaultTableModel) tblAccounts.getModel();
        model.setRowCount(0);
        Account account = dao.findById(id);
               
        if(account!=null) {
            Object[] rowData = {
                account.getAccountID(),
                account.getUsername(),
                account.getEmployeeID(),
                account.isActive() ? "Kích hoạt" : "Hủy",
                account.isRole() ? "Quản lý" : "Nhân viên"
            }; 
        model.addRow(rowData);
        }else JOptionPane.showMessageDialog(this, "Không tìm thấy tài khoản!", "Không hợp lệ", JOptionPane.ERROR_MESSAGE);

        txtFilterAccountID.setText("");
    }
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillToTable();
        this.clear();
    }

    @Override
    public void setForm(Account entity) {
        txtAccountID.setText(String.valueOf(entity.getAccountID()));
        txtAccountName.setText(entity.getUsername());
        txtEmpID.setText(String.valueOf(entity.getEmployeeID()));
        if(entity.isRole()) rdoManager.setSelected(true);
        else rdoEmp.setSelected(true);
        if (entity.isActive()) {
            rdoActive.setSelected(true);
        } else {
            rdoInactive.setSelected(true);
        }

    }

    @Override
    public Account getForm() {
        Account entity = new Account();
        entity.setAccountID(Integer.parseInt(txtAccountID.getText()));
        entity.setUsername(txtAccountName.getText());
        entity.setEmployeeID(Integer.parseInt(txtEmpID.getText()));
        entity.setActive(rdoActive.isSelected());
        entity.setRole(rdoManager.isSelected());
        return entity;
    }

   

    @Override
    public void update() {
        Account account = this.getForm();
        dao.update(account);
        XDialog.alert("Cập nhật thành công!");
        this.fillToTable();
    }

    @Override
    public void delete() {
        if (XDialog.confirm("Bạn muốn xóa mục đã chọn?")) {
            Integer accountID = Integer.valueOf(txtAccountID.getText());
            dao.deleteById(accountID);
            this.fillToTable();
            this.clear();
        }
        
    }

    @Override
    public void clear() {
        this.setForm(new Account());
        this.setEditable(false);
    }

    @Override
    public void setEditable(boolean editable) {
        txtAccountID.setEditable(!editable);
        btnFirst.setEnabled(editable);
        btnNext.setEnabled(editable);
        btnPrev.setEnabled(editable);
        btnLast.setEnabled(editable);
        btnUpdate.setEnabled(editable);
        btnDelete.setEnabled(editable);
        btnRefresh.setEnabled(editable);
    }

    @Override
    public void fillToTable() {
       model = (DefaultTableModel) tblAccounts.getModel();
       model.setRowCount(0);
       
       accounts = dao.findAll();
       accounts.forEach(account -> {
           Object[] rowData = {
               account.getAccountID(),
               account.getUsername(),
               account.getEmployeeID(),
               account.isActive() ? "Kích hoạt" : "Hủy",
               account.isRole() ? "Quản lý" : "Nhân viên"
           };
        model.addRow(rowData);
       });
       this.clear();
       
       for(int i=0; i<accounts.size(); i++) {
           System.out.println(accounts.get(i).isActive());
       }
           
    }

    @Override
    public void edit() {
        Account account = accounts.get(tblAccounts.getSelectedRow());
        this.setForm(account);
        tabs.setSelectedIndex(1);
        this.setChecked(true);
        this.setEditable(true);
    }

    @Override
    public void checkAll() {
        this.setCheckedAll(true);
        this.clear();
    }

    @Override
    public void uncheckAll() {
       this.setCheckedAll(false);
       this.clear();
    }
    
    public void setCheckedAll(boolean checked) {
        for(int i=0; i<tblAccounts.getRowCount(); i++) {
            tblAccounts.setValueAt(checked,i,5);
        }
    }
    
      public void setChecked(boolean checked) {
            tblAccounts.setValueAt(checked,tblAccounts.getSelectedRow(),5);
        
    }

    @Override
    public void deleteCheckedItems() {
        int[] rows = tblAccounts.getSelectedRows();
        
        if(XDialog.confirm("Bạn có chắc chắn xóa?")) {
            for(int row : rows) {
                Account account = accounts.get(row);
                dao.deleteById(account.getAccountID());
                accounts.remove(row);
            }
        }
    }

    @Override
    public void moveFirst() {
        this.moveTo(0);
    }

    @Override
    public void movePrevious() {
        this.moveTo(tblAccounts.getSelectedRow() -1);
    }

    @Override
    public void moveNext() {
        this.moveTo(tblAccounts.getSelectedRow() +1);
    }

    @Override
    public void moveLast() {
       this.moveTo(tblAccounts.getRowCount()-1);
    }

    @Override
    public void moveTo(int rowIndex) {
        if(rowIndex < 0) {
            this.moveLast();
        }else if(rowIndex >= tblAccounts.getRowCount()) {
            this.moveFirst();
        }else {
            tblAccounts.clearSelection();
            tblAccounts.setRowSelectionInterval(rowIndex, rowIndex);
            this.edit();
        }
    }

    @Override
    public void create() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    public void exportExcel() {
          if(tblAccounts.getRowCount() == 0) {
            XDialog.alert("Không tìm thấy dữ liệu!");
            return;
            }
            String[] header = {"Mã tài khoản", "Tên đăng nhập", "Mã nhân viên", "Trạng thái", "Vai trò"};
            List<Account> list = dao.findAll();
            List<Object[]> listObj = new ArrayList<>();
               for(Account obj : list) {
                   Object[] row = {
                      obj.getAccountID(),
                       obj.getUsername(),
                       obj.getEmployeeID(),
                       obj.isActive()? "Kích hoạt" : "Hủy",
                       obj.isRole()? "Quản lý" : "Nhân viên"
                   };
                  listObj.add(row);
               }
            String fileName = "Quản lý tài khoản";
            String title = "Chi tiết thông tin tài khoản";

            XFile.exportFile(this, title, header, fileName, listObj);
    }

    
}
