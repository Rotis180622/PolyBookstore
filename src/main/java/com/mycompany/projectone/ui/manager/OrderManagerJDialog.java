/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.mycompany.projectone.ui.manager;

import com.mycompany.projectone.ui.CheckoutJDialog;
import com.mycompany.projectone.controller.OrderController;
import com.mycompany.projectone.dao.impl.BookDAOImpl;
import com.mycompany.projectone.dao.impl.CustomerDAOImpl;
import com.mycompany.projectone.dao.impl.OrderDAOImpl;
import com.mycompany.projectone.dao.impl.OrderDetailDAOImpl;
import com.mycompany.projectone.dao.impl.OrderDetailViewDAOImpl;
import com.mycompany.projectone.entity.Book;
import com.mycompany.projectone.entity.Customer;
import com.mycompany.projectone.entity.Order;
import com.mycompany.projectone.entity.OrderDetail;
import com.mycompany.projectone.util.TimeRange;
import com.mycompany.projectone.util.XDate;
import com.mycompany.projectone.util.XDialog;
import com.mycompany.projectone.viewmodel.OrderDetailViewModel;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gaudomun
 */
public class OrderManagerJDialog extends javax.swing.JDialog implements OrderController<OrderDetailViewModel>{

    /**
     * Creates new form BillManagerJDialog_ver2
     */
    public OrderManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        pnlDetailedOrders = new javax.swing.JPanel();
        lblBegin = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        lblFilterByID = new javax.swing.JLabel();
        txtFilterByID = new javax.swing.JTextField();
        lblEnd = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        cboTimeRange = new javax.swing.JComboBox<>();
        btnClear = new javax.swing.JButton();
        pnlOrders = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        lblOrderDate = new javax.swing.JLabel();
        txtOrderID = new javax.swing.JTextField();
        txtOrderDate = new javax.swing.JTextField();
        lblCustomerID = new javax.swing.JLabel();
        lblEmpID = new javax.swing.JLabel();
        lblPromoID = new javax.swing.JLabel();
        txtEmpID = new javax.swing.JTextField();
        txtCustomerID = new javax.swing.JTextField();
        txtPromoID = new javax.swing.JTextField();
        txtBookID = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        lblBookID = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        lblUnitPrice = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tạo hóa đơn");
        setPreferredSize(new java.awt.Dimension(700, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblBegin.setText("Ngày bắt đầu");

        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã phiếu CT", "Ngày tạo", "Tên sách", "Thể loại", "Đơn giá", "Số lượng", "Giảm giá", "Thành tiền"
            }
        ));
        tblOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrders);

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblTotal.setText("Tổng thành tiền");

        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        lblFilterByID.setText("Nhập mã phiếu");

        lblEnd.setText("Ngày kết thúc");

        cboTimeRange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Năm nay", " " }));
        cboTimeRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboTimeRangeItemStateChanged(evt);
            }
        });
        cboTimeRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangeActionPerformed(evt);
            }
        });

        btnClear.setText("Làm mới");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDetailedOrdersLayout = new javax.swing.GroupLayout(pnlDetailedOrders);
        pnlDetailedOrders.setLayout(pnlDetailedOrdersLayout);
        pnlDetailedOrdersLayout.setHorizontalGroup(
            pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                        .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                        .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                                .addComponent(lblBegin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(lblEnd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(lblFilterByID, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterByID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearch))
                            .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlDetailedOrdersLayout.setVerticalGroup(
            pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailedOrdersLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEnd)
                        .addComponent(txtEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBegin)
                        .addComponent(txtBegin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFilterByID)
                        .addComponent(txtFilterByID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlDetailedOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103))
        );

        tabs.addTab("Chi tiết hóa đơn", pnlDetailedOrders);

        pnlOrders.setPreferredSize(new java.awt.Dimension(900, 395));

        lblID.setText("Mã phiếu");

        lblOrderDate.setText("Ngày tạo");

        txtOrderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderIDActionPerformed(evt);
            }
        });

        txtOrderDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderDateActionPerformed(evt);
            }
        });

        lblCustomerID.setText("Mã khách hàng");

        lblEmpID.setText("Mã nhân viên");

        lblPromoID.setText("Mã khuyến mãi (nếu có)");

        txtEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpIDActionPerformed(evt);
            }
        });

        txtCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerIDActionPerformed(evt);
            }
        });

        txtPromoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPromoIDActionPerformed(evt);
            }
        });

        txtBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookIDActionPerformed(evt);
            }
        });

        lblQuantity.setText("Số lượng");

        lblBookID.setText("Mã sách");

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel());

        lblUnitPrice.setText("Đơn giá");

        txtUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitPriceActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(0, 0, 0));
        btnExport.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnExport.setForeground(new java.awt.Color(255, 255, 255));
        btnExport.setText("Xuất hóa đơn");
        btnExport.setOpaque(true);
        btnExport.setPreferredSize(new java.awt.Dimension(77, 23));
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon("C:\\Users\\gaudo.NGUYNQUYN\\DuAnMot\\src\\main\\resources\\up.png")); // NOI18N
        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon("C:\\Users\\gaudo.NGUYNQUYN\\DuAnMot\\src\\main\\resources\\delete.png")); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon("C:\\Users\\gaudo.NGUYNQUYN\\DuAnMot\\src\\main\\resources\\refresh.png")); // NOI18N
        btnRefresh.setText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveLast.png"))); // NOI18N
        btnLast.setPreferredSize(new java.awt.Dimension(77, 23));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveNext.png"))); // NOI18N
        btnNext.setPreferredSize(new java.awt.Dimension(77, 23));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MovePrevious.png"))); // NOI18N
        btnPrev.setPreferredSize(new java.awt.Dimension(77, 23));
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MoveFirst.png"))); // NOI18N
        btnFirst.setPreferredSize(new java.awt.Dimension(77, 23));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon("C:\\Users\\gaudo.NGUYNQUYN\\DuAnMot\\src\\main\\resources\\add.png")); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOrdersLayout = new javax.swing.GroupLayout(pnlOrders);
        pnlOrders.setLayout(pnlOrdersLayout);
        pnlOrdersLayout.setHorizontalGroup(
            pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlOrdersLayout.createSequentialGroup()
                                .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOrderDate, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlOrdersLayout.createSequentialGroup()
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCustomerID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOrdersLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(331, 331, 331))
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPromoID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPromoID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblBookID)
                                .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity))
                        .addGap(358, 358, 358))))
        );
        pnlOrdersLayout.setVerticalGroup(
            pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrdersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(lblOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlOrdersLayout.createSequentialGroup()
                        .addComponent(lblCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlOrdersLayout.createSequentialGroup()
                                .addComponent(lblBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlOrdersLayout.createSequentialGroup()
                                .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlOrdersLayout.createSequentialGroup()
                                .addComponent(lblUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(lblPromoID, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPromoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlOrdersLayout.createSequentialGroup()
                        .addComponent(lblEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnRefresh)
                            .addComponent(btnDelete)
                            .addComponent(btnSave))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlOrdersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFirst, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(pnlOrdersLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11))
        );

        tabs.addTab("Nhập hóa đơn", pnlOrders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtOrderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderIDActionPerformed

    private void txtOrderDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderDateActionPerformed

    private void txtEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmpIDActionPerformed

    private void txtCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerIDActionPerformed

    private void txtPromoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPromoIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPromoIDActionPerformed

    private void txtBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookIDActionPerformed

    private void txtUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitPriceActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        this.exportInvoice();
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.updateInvoice();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        this.cancelInvoice();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
       this.resetForm();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        this.navigateLast();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        this.navigateNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        this.navigatePrevious();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        this.navigateFirst();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String beginText = txtBegin.getText().trim();
        String endText = txtEnd.getText().trim();
        String idText = txtFilterByID.getText().trim();

        // Trường hợp 1: Chỉ lọc theo ID
        if (beginText.isEmpty() && endText.isEmpty() && !idText.isEmpty()) {
            this.searchInvoice(idText);
        }
        // Trường hợp 2: Chỉ lọc theo khoảng thời gian
        else if (!beginText.isEmpty() && !endText.isEmpty() && idText.isEmpty()) {
            try {
                Date beginDate = XDate.parse(beginText, "yyyy-MM-dd");
                Date endDate = XDate.parse(endText, "yyyy-MM-dd");

                if (beginDate.after(endDate)) {
                    JOptionPane.showMessageDialog(this, "Ngày bắt đầu không được sau ngày kết thúc.");
                    return;
                }

                this.searchInvoiceByTimeRange(beginDate, endDate);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ. Vui lòng dùng yyyy-MM-dd.");
            }
        }
        // Trường hợp 3: Không nhập gì
        else if (beginText.isEmpty() && endText.isEmpty() && idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập Mã hóa đơn hoặc Khoảng thời gian.");
        }
        // Trường hợp 4: Nhập lung tung
        else {
            JOptionPane.showMessageDialog(this, "Chỉ được lọc theo Mã hóa đơn hoặc Khoảng thời gian, không kết hợp cả hai.");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void cboTimeRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboTimeRangeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cboTimeRangeItemStateChanged

    private void cboTimeRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimeRangeActionPerformed
        this.selectTimeRange();
        txtFilterByID.setText("");
    }//GEN-LAST:event_cboTimeRangeActionPerformed

    private void tblOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdersMouseClicked
        this.edit();
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
        btnFirst.setEnabled(true);
        btnPrev.setEnabled(true);
        btnNext.setEnabled(true);
        btnLast.setEnabled(true);
    }//GEN-LAST:event_tblOrdersMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtBegin.setText("");
        txtEnd.setText("");
        txtFilterByID.setText("");
        txtTotal.setText("");
        this.fillTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.saveForm();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderManagerJDialog dialog = new OrderManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboTimeRange;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBegin;
    private javax.swing.JLabel lblBookID;
    private javax.swing.JLabel lblCustomerID;
    private javax.swing.JLabel lblEmpID;
    private javax.swing.JLabel lblEnd;
    private javax.swing.JLabel lblFilterByID;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblOrderDate;
    private javax.swing.JLabel lblPromoID;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JPanel pnlDetailedOrders;
    private javax.swing.JPanel pnlOrders;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtEmpID;
    private javax.swing.JTextField txtEnd;
    private javax.swing.JTextField txtFilterByID;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtPromoID;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables

    List<OrderDetailViewModel> list = List.of();
    
    OrderDetailViewDAOImpl viewDao = new OrderDetailViewDAOImpl();
    
    OrderDAOImpl orderDao = new OrderDAOImpl();
    
    OrderDetailDAOImpl odDao = new OrderDetailDAOImpl();
    
    BookDAOImpl bookDao = new BookDAOImpl();
    
    DefaultTableModel model;
    
    DecimalFormat df = new DecimalFormat("#,##0");
    
    Order currentOrder;
   
    List<OrderDetail> tempList;
    List<OrderDetailViewModel> tempViewList;
    
    Integer index;
    
    @Override
    public void exportInvoice() {
       
        // Lấy parent an toàn
        java.awt.Window parentWindow = javax.swing.SwingUtilities.getWindowAncestor(this);
        javax.swing.JFrame parentFrame = (parentWindow instanceof javax.swing.JFrame) 
                ? (javax.swing.JFrame) parentWindow 
                : null;

        // Mở JDialog
        CheckoutJDialog dialog = new CheckoutJDialog(parentFrame, currentOrder, tempList, tempViewList);
        dialog.setVisible(true);
        this.fillTable();
        this.resetForm();
    }


    
    @Override
    public void saveForm() {
        OrderDetailViewModel entity = this.getForm();
        
        Book book = bookDao.findById(entity.getBookID());
        
        if(book != null) entity.setTitle(book.getTitle());
        entity.setTotal(new BigDecimal(txtUnitPrice.getText()).multiply( BigDecimal.valueOf( (Integer)spnQuantity.getValue())) );
        
          // ==== Kiểm tra xem hóa đơn tổng đã tồn tại chưa ====
        if (currentOrder == null || currentOrder.getOrderID() != entity.getOrderID()) {
            // Nếu chưa có thì tạo mới
            currentOrder = new Order();
            tempList = new ArrayList<>();
            tempViewList = new ArrayList<>();
             
            // ==== Gán thông tin hóa đơn tổng vào currentOrder ====
            CustomerDAOImpl customerDao = new CustomerDAOImpl();
            Customer customer = customerDao.findById(entity.getCustomerID());
            
           currentOrder.setOrderID(entity.getOrderID());
           currentOrder.setEmployeeID(entity.getEmployeeID());
           if(customer != null) currentOrder.setCustomerID(entity.getCustomerID());
           else XDialog.alert("Khách hàng chưa có trong danh sách!");
           currentOrder.setOrderDate(entity.getOrderDate());
           currentOrder.setPromotionID(entity.getPromotionID());

        } else if (tempList == null || currentOrder.getOrderID() != entity.getOrderID()) {
            tempList = new ArrayList<>();
            tempViewList = new ArrayList<>();
        }

        boolean found = false;
        for (int i = 0; i < tempList.size(); i++) {
            OrderDetail od = tempList.get(i);
            if (od.getBookID() == entity.getBookID()) {
                od.setQuantity(od.getQuantity() + entity.getQuantity());
                // Cập nhật đồng bộ trong tempViewList cùng vị trí i
                OrderDetailViewModel vm = tempViewList.get(i);
                vm.setQuantity(od.getQuantity());
                found = true;
                break;
            }
        }


        // Nếu chưa có sách này trong hóa đơn thì thêm mới
        if (!found) {
            OrderDetail currentOD = new OrderDetail();
            currentOD.setBookID(entity.getBookID());
            currentOD.setBookID(entity.getBookID());
            currentOD.setQuantity(entity.getQuantity());
            tempList.add(currentOD);
        }
        
        tempViewList.add(entity);

        // Gán lại danh sách chi tiết cho currentOrder
        currentOrder.setOrderDetails(tempList);
        currentOrder.setViewModel(tempViewList);

        // ==== Reset phần chi tiết để nhập tiếp ====
        clearDetailFields();

        this.setEditable(false);
        
        System.out.println(tempViewList.size());
    }

// Hàm xóa dữ liệu phần chi tiết (không xóa thông tin hóa đơn tổng)
    private void clearDetailFields() {
        txtBookID.setText("");
        txtUnitPrice.setText("");
        spnQuantity.setValue(0);
    }

   @Override
    public void updateInvoice() {
        Order order = this.getOrderEntity();
        OrderDetail oDetail = this.getOrderDetailEntity();
        Book book = this.getBookEntity();
        BookDAOImpl bookDao = new BookDAOImpl();
        
        try {
            // Gọi DAO update
            if(XDialog.confirm("Bạn có chắc chắn muốn cập nhật?")) {
                orderDao.update(order);
                odDao.update(oDetail);
                bookDao.updatePrice(book.getBookID(), book.getPrice());

                JOptionPane.showMessageDialog(null, 
                    "Cập nhật thành công!", 
                    "Thông báo", 
                    JOptionPane.INFORMATION_MESSAGE);
                this.fillTable();
            }      

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, 
                "Cập nhật thất bại!", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
        }
        
    }


    @Override
    public void cancelInvoice() {
        OrderDetailViewModel entity = this.getForm();
        if(XDialog.confirm("Bạn có chăc chắn muốn xóa mục này?", "Xác nhận xóa!")) {
            orderDao.deleteById(entity.getOrderID());
            JOptionPane.showMessageDialog(null, "Đã xóa thành công!");
             currentOrder = null;
            tempList = null;
            tempViewList = null;
            this.resetForm();
            this.fillTable();
        }
    }
    
    public Order getOrderEntity() {
        OrderDetailViewModel viewModel = this.getForm();
        Order order = new Order();
        order.setOrderID(viewModel.getOrderID());
        order.setCustomerID(viewModel.getCustomerID());
        order.setEmployeeID(viewModel.getEmployeeID());
        order.setOrderDate(viewModel.getOrderDate());
        order.setPromotionID(viewModel.getPromotionID());
        
        return order;
    }
    
     public OrderDetail getOrderDetailEntity() {
        OrderDetailViewModel viewModel = this.getForm();

        OrderDetail oDetail = new OrderDetail();
        oDetail.setOrderID(viewModel.getOrderID());
        oDetail.setBookID(viewModel.getBookID());
        oDetail.setQuantity(viewModel.getQuantity());
        oDetail.setDetailedOrderID((Integer)tblOrders.getValueAt(tblOrders.getSelectedRow(), 0));
        
        return oDetail;
    }
     
     public Book getBookEntity() {
         OrderDetailViewModel viewModel = this.getForm();
         
         Book book = new Book();
        book.setBookID(viewModel.getBookID());
        book.setPrice(viewModel.getPrice());
        
        return book;
     }

    @Override
    public void resetForm() {
         txtOrderID.setText("");
         txtOrderDate.setText("");
         txtEmpID.setText("");
         txtCustomerID.setText("");
         txtPromoID.setText("");
         txtBookID.setText("");
         txtUnitPrice.setText("");
         spnQuantity.setValue(0);
         
         this.setEditable(true);
    }

    @Override
    public void navigateFirst() {
        index = 0;
        this.navigateTo(index);
    }

    @Override
    public void navigatePrevious() {
        if(tblOrders.getSelectedRow() != -1 ) {
            index = tblOrders.getSelectedRow();
            index --;
            tblOrders.clearSelection();
        }else if(index == 0){
            this.navigateLast();
        }
        else index--;
           
        this.navigateTo(index);
    }

    @Override
    public void navigateNext() {
        if(tblOrders.getSelectedRow() != -1) {
            index = tblOrders.getSelectedRow();
            index++;
            tblOrders.clearSelection();
        }else if(index == tblOrders.getRowCount() ) {
            this.navigateFirst();
        }else index++;
        
        this.navigateTo(index);
    }

    @Override
    public void navigateLast() {
        index = tblOrders.getRowCount() - 1;
        this.navigateTo(index);
    }
    
    @Override
    public void navigateTo(Integer index) {
        list = viewDao.findAll();
        OrderDetailViewModel entity = list.get(index);
        
        this.setForm(entity);
    }
    
    @Override
    public void searchInvoice(String keyword) {
        list = viewDao.findAll();
        model.setRowCount(0);
        
        list.forEach(item -> {
            if(item.getOrderID() == Integer.parseInt(keyword)) {
                model = (DefaultTableModel)tblOrders.getModel();
                             
                Object[] dataRow = {
                    item.getDetailedOrderID(),
                    item.getOrderDate(),
                    item.getTitle(),
                    item.getCategoryName(),
                    item.getPrice().setScale(0),
                    item.getQuantity(),
                    item.getDiscountValue() !=null ? item.getDiscountValue().setScale(0) : BigDecimal.ZERO,
                    item.getTotal().setScale(0)
                };
                model.addRow(dataRow);
            } 
        });
        this.calculateTotal();
    }

    @Override
    public void calculateTotal() {
        //BigDecimal total = BigDecimal.valueOf(0);
        BigDecimal total = BigDecimal.ZERO;
        for(int i=0; i<tblOrders.getRowCount(); i++) {
            total = total.add((BigDecimal)tblOrders.getValueAt(i, 7));
        }  
        txtTotal.setText(df.format(total.setScale(0)));
    }

    @Override
    public void setForm(OrderDetailViewModel entity) {
         txtOrderID.setText(String.valueOf(entity.getOrderID()));
         txtOrderDate.setText(String.valueOf(entity.getOrderDate()));
         txtEmpID.setText(String.valueOf(entity.getEmployeeID()));
         txtCustomerID.setText(String.valueOf(entity.getCustomerID()));
         txtPromoID.setText(String.valueOf(entity.getPromotionID()));
         txtBookID.setText(String.valueOf(entity.getBookID()));
         txtUnitPrice.setText(entity.getPrice() != null ? entity.getPrice().toPlainString() : "");
         spnQuantity.setValue((Integer)entity.getQuantity());
    }

    @Override
    public OrderDetailViewModel getForm() {
        if (!validateForm()) {
            return null; // hoặc throw exception tùy ý
        }
        OrderDetailViewModel entity = new OrderDetailViewModel();
        entity.setOrderID(Integer.parseInt(txtOrderID.getText()));
        entity.setBookID(Integer.parseInt(txtBookID.getText()));
        entity.setEmployeeID(Integer.parseInt(txtEmpID.getText()));
        entity.setCustomerID(Integer.parseInt(txtCustomerID.getText()));
        entity.setPromotionID(Integer.parseInt(txtPromoID.getText()));
        entity.setPrice(new BigDecimal(txtUnitPrice.getText()));
        entity.setQuantity((Integer)spnQuantity.getValue());
        entity.setOrderDate(XDate.parse(txtOrderDate.getText(),"yyyy-MM-dd"));
        return entity;
    }
    
    private boolean validateForm() {
    // Kiểm tra rỗng
    if (txtOrderID.getText().trim().isEmpty() ||
        txtBookID.getText().trim().isEmpty() ||
        txtEmpID.getText().trim().isEmpty() ||
        txtCustomerID.getText().trim().isEmpty() ||
        txtPromoID.getText().trim().isEmpty() ||
        txtUnitPrice.getText().trim().isEmpty() ||
        txtOrderDate.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!");
        return false;
    }

    // Kiểm tra giá
    try {
        BigDecimal price = new BigDecimal(txtUnitPrice.getText().trim());
        if (price.compareTo(BigDecimal.ZERO) <= 0) {
            JOptionPane.showMessageDialog(this, "Giá phải lớn hơn 0!");
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Giá không hợp lệ!");
        return false;
    }

    // Kiểm tra ngày
    try {
        XDate.parse(txtOrderDate.getText().trim(), "yyyy-MM-dd");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Ngày không đúng định dạng yyyy-MM-dd!");
        return false;
    }

    return true;
}


    @Override
    public void fillTable() {
        list = viewDao.findAll();
        
        model = (DefaultTableModel) tblOrders.getModel();
        model.setRowCount(0);
        DecimalFormat df = new DecimalFormat("#,##0");
        list.forEach(item -> {
            Object[] rowData = {
                item.getDetailedOrderID(),
                item.getOrderDate(),
                item.getTitle(),
                item.getCategoryName(),
                df.format(item.getPrice().setScale(0)),
                item.getQuantity(),
                item.getDiscountValue() !=null ? item.getDiscountValue().setScale(0) : BigDecimal.ZERO,
                df.format(item.getTotal().setScale(0))
            };
            model.addRow(rowData);
        });
    }

   

    @Override
    public void setEditable(boolean editable) {
        txtOrderID.setEditable(editable);
        txtOrderDate.setEditable(editable);
        txtEmpID.setEditable(editable);
        txtCustomerID.setEditable(editable);
        
        btnFirst.setEnabled(!editable);
        btnPrev.setEnabled(!editable);
        btnNext.setEnabled(!editable);
        btnLast.setEnabled(!editable);
        btnDelete.setEnabled(!editable);
        btnUpdate.setEnabled(!editable);
    }
    
    
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillTable();
        this.setEditable(true);
    }

    @Override
    public void selectTimeRange() {
        TimeRange timeRange = null;

        String selected = (String) cboTimeRange.getSelectedItem();
        
        timeRange = switch (selected) {
            case ("Hôm nay") -> TimeRange.today();
            case ("Tuần này") -> TimeRange.thisWeek();
            case ("Tháng này") -> TimeRange.thisMonth();
            case ("Năm nay") -> TimeRange.thisYear();
            default -> null;
        };


        if (timeRange != null) {
          DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
          txtBegin.setText(String.valueOf(formatter.format(timeRange.getBegin())));
          txtEnd.setText(String.valueOf(formatter.format(timeRange.getEnd())));
        }
    }

    @Override
    public void searchInvoiceByTimeRange(Date begin, Date end) {
        list = viewDao.findByOrderDate(begin, end);
        
        model = (DefaultTableModel) tblOrders.getModel();
        model.setRowCount(0);
        
        list.forEach(item -> {
            Object[] rowData = {
                item.getDetailedOrderID(),
                item.getOrderDate(),
                item.getTitle(),
                item.getCategoryName(),
                item.getPrice().setScale(0),
                item.getQuantity(),
                item.getDiscountValue() !=null ? item.getDiscountValue().setScale(0) : BigDecimal.ZERO,
                item.getTotal().setScale(0)
            };
            model.addRow(rowData);
        });
        this.calculateTotal();
    }

   @Override
   public void edit() {
       index = tblOrders.getSelectedRow();
       
       list = viewDao.findAll();
       
       OrderDetailViewModel viewModel = list.get(tblOrders.getSelectedRow());
       
       this.setForm(viewModel);
       tabs.setSelectedIndex(1);
   }
}
